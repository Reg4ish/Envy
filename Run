return(function(...)local loadfile={"\101\070\069\061","\066\080\105\049\049\081\057\115\089\080\122\050\051\070\057\051\057\087\054\061";"\071\049\083\083";"\072\065\117\061","\079\116\057\072\112\117\105\111","\105\119\065\061";"\043\090\043\109","\119\086\057\109";"\089\087\105\078";"\097\090\070\111";"\043\082\080\047";"\117\051\074\119\121\110\111\057\100\102\052\116\076\113\120\061";"\076\112\047\107","\049\081\049\057\065\100\077\115\056\088\104\047\057\086\116\061","\047\085\073\056\098\120\061\061";"\105\088\097\107\066\075\087\073\111\079\048\079\118\077\120\061","\085\053\080\114","\087\088\071\099","\068\075\121\070";"\118\119\085\104","\102\087\106\088","\101\102\119\089\113\082\057\116","\065\115\049\097","\103\087\067\108\097\049\050\080\097\055\076\051\098\080\089\047","\100\109\102\088";"\048\109\081\082\109\090\099\077\079\117\061\061","\055\102\051\111","\079\054\117\061","\057\082\086\112\085\106\088\078\083\083\081\052\103\079\056\061","\077\115\055\098\069\085\110\075\076\057\089\102\100\120\061\061","\088\122\114\070\073\085\103\105";"\068\101\048\057\084\097\118\099\081\099\086\076\072\097\070\113\055\054\061\061";"\043\089\119\070\090\073\056\098\071\054\061\061";"\097\078\053\118","\051\110\104\119\089\086\115\109\102\081\070\105\089\098\105\102\113\054\061\061";"\114\075\049\107\056\099\100\070","\117\098\052\085\053\117\109\047\107\117\122\090","\084\072\118\102\122\119\090\081\052\052\088\072";"\090\122\116\112\075\065\069\072","\077\115\067\121";"\065\047\077\105\057\086\120\117\099\083\049\053\077\112\047\090\113\054\061\061";"\057\098\077\081\078\065\049\055";"","\090\088\108\070\077\079\102\052\118\120\100\065\082\119\118\103\073\050\110\107","\043\071\097\080","\117\118\118\101\112\097\085\119";"\098\079\081\114\065\052\109\057\067\114\061\061","\065\117\061\061";"\104\110\070\073\049\101\049\122\066\083\105\075\114\086\118\122\055\081\104\085\049\112\105\116\056\087\105\088","\070\082\073\067","\049\081\070\114\099\087\106\090\098\121\070\068\104\083\047\085\099\054\061\061";"\088\057\120\049","\077\086\103\107\051\080\105\117\056\099\105\070","\083\052\049\077\084\073\048\089\109\110\116\097\107\120\107\088\113\086\087\078\111\054\061\061","\050\070\088\048\118\077\048\057";"\120\105\089\051","\077\081\047\076\055\081\119\061";"\065\119\118\083\057\047\106\047\104\087\070\076\089\101\120\061";"\110\081\120\108\078\114\109\107\097\075\119\081\067\116\089\083";"\081\101\081\114\048\049\082\072\097\043\048\048\097\051\088\083\103\120\061\061";"\070\101\117\078";"\057\107\051\116\054\115\057\048","\114\086\103\073\055\110\057\121\077\054\061\061";"\115\066\098\102\065\114\067\120\114\098\108\074\055\110\051\049\112\051\089\075\122\102\067\114\047\089\043\076";"\119\047\105\079\114\099\101\080\102\087\122\073\089\070\070\112";"\071\047\088\081\047\087\071\106\066\065\067\099\115\067\047\102","\075\047\112\061";"\078\068\103\117\069\074\048\115\118\113\083\050\048\086\087\077\117\114\117\118\099\077\076\051\089\054\061\061";"\052\073\108\074\083\085\113\085","\108\117\072\066";"\113\067\069\061";"\099\108\105\100\077\080\101\100\055\083\057\110\049\099\052\117","\119\081\115\118\113\099\057\107";"\056\087\049\121\056\119\101\075\056\070\104\112\051\121\104\073","\054\081\090\068\118\100\069\089","\104\086\057\073\049\087\106\118\077\081\057\082\057\119\070\101";"\089\105\057\099","\080\108\111\100\074\075\065\078\119\116\056\061","\049\043\054\071","\066\074\066\054","\072\119\082\115";"\055\081\057\073";"\102\098\057\072\089\112\118\057\051\110\077\072\098\119\070\088\065\054\061\061","\074\122\082\053","\114\075\053\080\098\099\057\105\114\070\122\089\098\110\053\110\089\117\061\061";"\118\088\072\099","\055\110\053\088\114\099\103\114\051\081\115\078\049\098\070\086\089\119\066\061","\077\082\070\117\049\099\103\110","\103\048\043\076\079\117\061\061";"\065\101\073\103\107\068\066\104\109\049\075\070\086\076\108\112";"\116\114\055\099\073\081\043\105\074\067\071\061","\057\116\101\122\117\106\113\087";"\120\056\115\047","\121\075\103\076\071\081\114\061";"\110\120\072\085";"\087\100\103\116\049\099\090\061";"\083\071\103\089\073\109\102\074","\114\089\070\082","\055\099\066\100";"\105\072\069\061","\070\105\077\079\066\108\081\072\068\119\055\052\120\086\119\071\043\051\085\050","\049\047\057\110\051\112\104\081\119\083\057\086\104\098\049\082\066\114\061\061";"\066\083\077\119\105\112\100\050\055\075\074\086\113\099\115\081","\054\104\051\103";"\076\106\057\102\071\114\056\061";"\056\086\103\073\056\086\047\075";"\086\108\100\067\112\073\121\114","\084\117\061\061","\098\081\057\107\066\054\061\061";"\067\104\080\052\066\083\119\114\105\121\055\089\070\051\116\061","\078\103\056\089","\072\078\105\113\079\054\061\061","\089\099\087\055","\113\074\089\088";"\110\120\055\118","\090\084\102\068\081\100\082\099\108\110\122\105\052\120\106\118\070\117\061\061";"\053\051\076\117\048\082\055\111\085\114\061\061";"\066\110\047\073\049\081\103\053";"\104\121\118\087\104\119\106\118\055\082\057\053\104\081\066\086\102\114\061\061","\101\082\122\081\047\121\100\098\050\054\107\065\066\120\057\111\113\120\061\061";"\113\104\089\050\113\113\117\078\054\054\061\061","\048\085\071\115\103\051\084\115\080\117\061\061";"\086\103\084\068";"\089\076\056\075\081\067\118\082\085\052\106\050\080\066\112\083","\107\084\081\083\104\049\085\120\104\099\074\051\066\108\054\061";"\089\081\066\086\098\100\070\053\089\047\070\106\049\100\106\051\119\087\114\061";"\122\083\072\112","\100\085\105\120\078\105\107\050\108\098\066\051";"\077\117\103\043";"\072\056\102\102\106\116\080\068\110\117\090\061","\073\113\054\120\116\079\116\057\054\112\047\084\067\084\119\061","\057\101\122\098\089\057\057\073\051\121\078\110\098\086\114\100\113\121\114\061","\116\109\070\090";"\075\067\075\070";"\088\078\070\067\077\065\110\047";"\117\102\079\114\047\112\054\061";"\078\083\077\085\069\120\061\061","\106\114\100\090","\098\080\070\119\057\075\049\089\065\087\052\080\066\080\118\121\051\054\061\061";"\077\082\121\100\077\071\087\083\051\054\061\061","\056\113\097\057","\112\109\098\049\052\112\066\082","\057\082\052\061";"\057\082\077\070\049\099\074\106\055\110\049\109";"\121\114\101\065";"\109\088\119\103\088\117\061\061","\085\072\106\055";"\119\112\074\122\114\080\078\056\114\119\103\056\055\075\077\115\119\120\061\061";"\057\114\056\049\047\107\107\066";"\118\120\076\122\119\100\115\056\065\101\101\088\115\117\080\109";"\098\057\047\048\056\075\106\056\077\075\049\086\049\112\053\067";"\087\070\066\061","\099\047\114\077\081\052\099\110\108\073\114\061";"\065\077\068\069\120\100\054\117\086\106\049\055\116\057\089\067";"\116\070\043\099","\068\118\109\052\053\079\057\089\120\106\084\120\053\111\065\061","\055\108\101\061","\098\089\111\097\114\079\112\082\085\047\068\055\118\048\055\110\112\120\061\061";"\055\099\047\075\051\054\061\061","\113\070\057\088\055\119\100\057\099\110\049\079\066\057\070\090\119\120\061\061","\085\119\116\061";"\077\084\072\098\066\075\115\054\114\100\085\072\079\068\118\078\079\056\051\109";"\101\077\052\057\084\085\086\053","\113\087\067\078";"\113\052\069\111\120\069\049\067\108\081\054\106\120\101\053\057\057\114\118\098\056\116\069\122\047\077\073\099\101\117\061\061";"\065\054\108\082\055\117\061\061";"\055\074\118\102\052\100\068\120","\120\122\101\061","\104\081\057\088\077\082\106\109\113\114\061\061","\082\118\074\066\112\068\071\077\111\072\100\099\105\054\061\061","\098\113\109\113\108\111\114\061","\106\054\117\087","\114\100\106\070\055\114\061\061","\116\097\083\056\065\054\053\104\103\104\052\109\069\097\086\100";"\087\048\066\075";"\112\087\051\082","\114\086\103\053\066\081\103\073\049\099\074\075\066\117\061\061","\049\081\077\069\119\099\103\082\066\099\105\050\119\101\106\085\098\075\119\061";"\076\074\109\078\117\105\076\117\043\109\120\061","\084\074\070\082";"\118\122\098\109\075\098\109\076\069\120\109\066\066\074\065\061","\105\100\068\080\080\043\069\061","\055\100\054\074\049\082\105\098\051\080\078\057\105\088\056\117\055\080\054\061";"\111\056\056\083\053\054\061\061","\057\102\099\088\067\056\099\081\090\109\069\066\118\051\114\061";"\050\089\087\087","\076\050\048\102\069\117\099\113";"\097\055\077\119\119\117\061\061","\116\099\106\067\113\088\052\115\087\110\085\102","\047\081\076\051";"\066\081\047\122\066\083\065\061","\117\081\088\043";"\121\082\073\068";"\084\051\075\119\072\084\079\070";"\089\087\105\098\077\082\057\112\051\099\071\061";"\066\054\080\105","\055\108\052\061";"\106\097\105\086";"\121\119\066\061","\056\107\118\100\102\102\117\061";"\111\114\104\050\118\098\075\078","\114\107\065\061";"\056\071\057\078","\065\101\114\081\043\114\061\061","\051\086\105\108\066\110\100\102\057\087\057\116\056\080\118\073";"\055\081\049\090\105\110\104\057\102\047\066\100\119\101\075\107\119\057\119\061";"\109\056\097\047","\112\056\069\061";"\100\122\109\048\104\104\109\117\100\086\089\122\068\083\089\049\120\108\109\065\071\089\052\061","\054\071\057\086\080\081\065\068\111\077\080\115\117\054\061\061";"\098\110\049\074\105\121\066\100\051\086\104\101\077\086\115\050\099\120\061\061";"\089\080\097\108";"\047\106\106\069\114\121\073\098\054\089\114\061";"\071\068\109\087","\083\056\115\119\079\114\061\061","\055\114\053\117\079\114\108\079","\100\116\122\054";"\114\057\057\122\099\099\053\105\066\112\104\107\099\112\103\053\102\119\112\061";"\066\054\067\121";"\051\070\049\106\077\083\118\114\057\108\057\116\105\075\105\116\105\099\065\061";"\111\065\118\087\055\076\102\110";"\054\049\067\077";"\053\067\117\115\051\113\088\121\105\054\121\056\055\043\067\051\048\112\114\111\081\120\061\061";"\072\054\061\061","\112\078\098\089\052\110\089\110\089\054\061\061";"\052\048\109\082","\069\108\119\061","\098\069\057\111\105\075\079\114\103\054\061\061","\051\118\117\120","\115\068\114\082\053\119\102\054";"\072\054\048\051";"\075\098\115\107\101\080\119\118\083\117\110\098\108\048\067\069\056\089\105\101\071\110\076\048","\098\099\103\086\049\099\100\070\055\083\114\061","\055\116\080\055\088\117\061\061";"\055\081\103\080\049\087\052\061";"\051\098\078\047\057\086\074\117\105\100\105\048\056\112\106\106\119\114\061\061","\052\086\049\109\102\087\104\052";"\112\088\101\061","\049\080\105\100\056\120\061\061";"\050\099\070\114","\114\084\097\053\074\098\079\090";"\104\117\061\061","\121\043\111\065","\090\087\101\061","\089\118\086\110";"\049\087\106\107\055\080\052\061","\098\110\118\080\051\119\047\075\105\100\122\115\055\100\070\076\119\114\061\061";"\086\056\082\098\055\097\081\050\104\112\089\055\052\108\090\075","\114\086\047\112\049\075\112\075\055\119\075\090\105\100\070\118";"\066\085\098\105\043\118\079\075","\120\087\057\117","\115\072\055\086","\074\048\083\103\076\073\067\070\097\070\119\054","\051\120\107\076";"\047\073\048\052\067\078\071\049\071\086\089\120\122\069\101\111\106\101\113\077\074\114\061\061";"\076\118\073\103\081\097\055\122\121\120\069\061";"\078\099\108\118","\104\081\070\088\056\086\103\073\055\110\057\121\077\054\061\061";"\119\081\115\118\113\114\061\061","\051\106\109\047","\074\080\071\086\111\054\061\061";"\115\051\104\116\081\111\068\110";"\053\085\119\061";"\119\110\057\110\051\087\114\061","\081\118\113\086\048\051\052\111";"\065\080\120\101","\084\057\121\111","\066\080\104\107\051\099\074\083","\057\081\047\053\066\081\057\107\052\101\104\070\077\081\057\121\077\081\057\112\052\114\061\061";"\057\110\057\121\077\081\103\107\065\120\061\061","\051\114\052\113\085\067\049\070\053\043\110\079\087\082\067\104\122\120\061\061";"\115\115\052\061","\114\077\109\043\102\105\098\052\057\056\066\061";"\081\066\086\079\122\117\061\061";"\077\081\103\073\077\099\100\076\049\087\052\061";"\056\077\080\103","\067\106\108\073\069\100\106\111\074\120\061\061";"\081\083\108\082\084\120\061\061","\051\099\103\073\066\057\118\088\065\087\052\088\055\100\114\115\066\114\061\061";"\068\122\102\102\118\107\082\107";"\057\088\070\115\055\110\103\115\113\082\106\088\051\099\057\069\066\120\061\061";"\076\050\102\102";"\109\075\067\088\097\113\114\075\056\055\097\105\099\111\071\074\083\075\122\088","\121\057\122\107\065\086\052\061","\113\098\104\086\114\080\104\074\055\099\049\089\099\121\070\105\051\117\061\061","\102\122\079\111\107\103\119\116";"\118\098\057\087\105\099\069\090\070\115\047\114\107\070\109\105\097\117\082\110\081\069\069\061","\049\086\047\053\049\114\061\061","\114\057\065\074\099\119\047\100\089\101\070\079\057\057\106\048";"\068\075\121\082","\106\106\109\067\107\115\073\099";"\119\118\050\048\112\113\101\061";"\106\089\079\101\069\054\061\061","\050\090\120\077";"\066\081\105\118\055\081\117\061";"\052\109\069\048\075\117\061\061";"\098\101\070\116\113\081\057\105\066\108\049\088\057\083\049\116\056\114\061\061","\102\120\061\061","\082\049\052\087","\103\100\105\070\049\053\081\076\122\068\056\061";"\108\073\065\115\112\082\121\116";"\055\122\072\079\115\054\071\049\107\070\117\083\105\117\061\061";"\066\110\057\053\055\080\049\070","\104\110\070\107\049\119\105\116\051\099\057\073\077\054\061\061","\105\057\047\048\065\100\104\119\051\108\047\082\098\057\122\080\113\120\061\061";"\119\119\047\067\073\070\081\110";"\065\047\065\088\057\100\057\087\051\110\052\088\114\070\049\112\102\087\112\061";"\048\048\071\061";"\056\055\120\070","\116\120\086\104\056\097\121\052","\121\108\079\047\079\117\061\061","\070\109\120\088";"\065\107\076\114";"\081\051\112\097\110\054\061\061";"\099\121\071\072\100\057\109\086\084\054\061\061","\073\066\049\120","\114\100\106\112\049\088\118\106\089\088\078\105\119\100\047\090\055\114\061\061","\057\121\070\085\049\088\105\114\114\083\122\047\105\098\104\082\055\057\069\061","\115\053\050\055\106\087\116\072\099\053\122\100\101\118\056\052\080\065\057\086\097\114\061\061";"\072\107\065\061";"\056\057\112\115\080\081\090\121";"\085\069\078\052\089\075\066\061";"\122\114\101\061","\066\086\120\117\119\087\070\082\051\101\100\068\119\101\065\117\114\120\061\061";"\055\098\112\106\101\084\047\080\122\099\087\069\048\049\122\078\065\117\061\061","\114\086\115\109\055\110\119\061","\118\084\099\113\122\120\061\061";"\076\071\084\071","\067\101\084\066\057\114\061\061","\112\098\082\066\112\120\050\080";"\089\051\099\080","\114\080\106\070\056\087\104\070";"\066\065\067\086\055\114\061\061";"\089\086\057\074","\053\100\120\111\090\047\080\088\087\099\105\049\074\108\112\085","\108\052\070\103\076\068\089\051\043\099\087\097\097\107\120\117\048\117\061\061","\082\065\113\116\049\071\112\088\104\088\053\085\087\107\106\089\087\120\061\061";"\069\043\082\067\084\079\097\055\119\116\083\082";"\120\101\084\122\080\118\069\061";"\121\106\121\086","\047\110\122\086\066\054\066\061";"\102\112\051\079\082\076\118\072\119\065\108\085\043\067\121\072","\097\056\054\048\049\098\113\085\087\115\119\098\083\076\105\122\085\083\120\085\073\117\061\061";"\089\086\070\121\051\117\061\061";"\051\101\104\112\105\108\049\074\066\110\049\080\056\112\065\074\102\119\066\061";"\107\047\085\121\103\117\101\088\068\071\077\056\085\082\087\107\117\054\061\061","\111\114\054\073\097\078\099\110\055\114\061\061";"\098\109\109\099\065\055\052\109\067\084\069\112";"\105\047\077\109\051\075\047\074\105\108\057\047\089\112\119\075\077\075\071\061";"\108\051\119\061";"\077\083\118\070\105\088\105\085\102\099\100\104\119\083\118\050\055\114\061\061";"\087\087\070\047\109\101\111\097\112\074\073\101\103\111\118\118\073\103\053\106","\099\057\111\067\065\100\055\121\057\066\052\061","\074\066\089\114\081\050\084\098","\079\102\090\112","\067\110\098\111\119\109\089\070";"\099\098\105\047\104\075\104\070\049\082\049\088\065\110\106\082\066\082\066\061","\087\100\103\122\055\110\104\070\113\054\061\061";"\099\121\077\105\117\108\090\099\074\071\049\098\103\105\100\065\052\071\069\121","\104\099\074\100\055\114\061\061";"\057\048\048\079","\065\116\110\084\103\108\074\104\104\107\120\061","\087\048\097\069\085\112\118\115\110\050\065\087\071\047\105\122";"\076\072\101\055","\079\101\076\072";"\121\052\112\071\099\073\105\121\107\114\114\061";"\077\098\052\086\099\121\049\082\051\086\105\101\098\099\090\117\098\080\119\061","\066\085\117\073\100\114\061\061";"\065\098\083\122";"\077\099\074\117\056\099\105\050";"\067\118\112\056";"\072\102\085\082\113\115\071\061","\087\052\113\055","\114\086\105\085\114\119\115\078\105\112\090\115\066\121\049\101";"\056\081\074\048\069\103\109\115","\111\086\098\111\051\100\051\110";"\049\086\100\118\077\081\105\069";"\057\101\112\105\081\117\061\061";"\065\065\106\104\053\112\105\077\086\098\052\110","\057\055\081\103\105\043\101\074\119\117\061\061","\074\117\119\061";"\078\100\114\061","\089\057\105\114\051\080\104\122\051\108\078\089\077\112\053\118\055\082\114\061";"\088\066\090\050","\074\102\081\118","\056\081\117\120\118\054\072\057\075\077\081\103\087\084\100\053\111\120\061\061";"\115\082\067\089","\051\050\099\097\069\055\089\051";"\116\106\066\118","\047\113\106\101\085\054\061\061","\087\109\078\066\068\071\100\054\054\117\061\061";"\081\111\065\061";"\054\114\056\104";"\090\053\051\043";"\055\078\111\108";"\049\102\101\061";"\113\098\077\122\098\110\057\098\105\086\101\117\105\088\049\088\114\121\112\061";"\119\049\116\097","\114\069\066\080","\103\117\073\051\084\120\061\061","\054\105\076\119\103\115\106\109\074\065\053\053\110\114\061\061","\122\121\068\074";"\098\115\069\079\082\119\122\102\054\097\108\052\053\116\082\049\082\120\061\061","\084\074\054\061","\102\119\047\047\119\110\047\114\055\075\115\086\104\080\105\068\104\120\061\061";"\099\110\115\112\099\083\077\085\055\086\106\109\104\119\115\112\114\070\052\061","\071\112\067\073";"\055\115\055\089\082\117\117\088\054\070\100\083\122\047\080\113","\112\077\081\102\119\056\112\103\080\075\076\047\113\111\048\117","\101\107\102\056\068\050\047\071","\084\055\052\078";"\099\054\051\066","\052\114\061\061";"\111\069\069\084","\054\115\086\068\118\065\086\066\102\110\081\098\114\066\075\061","\049\082\052\075\098\112\122\086\105\083\106\105\065\119\115\105\055\054\061\061","\115\076\052\075";"\111\072\088\102\109\083\082\049\053\114\061\061","\114\072\072\097\102\054\061\061";"\104\086\057\075\119\086\057\107\077\110\070\121\049\114\061\061","\085\047\049\113\114\067\097\071\098\115\122\111\086\108\079\073\078\075\118\089\057\117\061\061";"\057\087\104\082";"\053\079\067\088\117\101\105\083";"\119\101\115\078\099\119\057\089";"\114\116\117\110","\116\082\100\102";"\106\109\101\080\107\067\085\052\069\120\061\061","\102\076\120\070\049\079\069\122\102\120\061\061";"\066\053\119\061";"\114\075\103\105\119\101\103\102\104\119\074\119\119\117\061\061","\051\052\115\081\118\054\061\061","\088\113\086\113\054\120\061\061";"\048\101\069\100\067\078\118\108\066\083\068\117\069\120\061\061","\110\057\068\083";"\089\099\074\088\077\081\047\073\056\086\119\061","\090\085\077\102";"\111\107\086\114";"\102\098\078\056\089\112\057\101\119\119\074\048\102\099\105\116";"\113\077\105\097\065\077\104\085\097\072\101\061","\111\075\089\071\048\105\077\117","\112\074\080\085\088\051\110\120\098\080\069\061","\075\118\054\052\073\117\061\061";"\080\120\078\098\077\051\113\100\120\114\071\061";"\078\068\073\085";"\056\083\070\075\049\114\061\061";"\101\067\101\049","\055\122\088\048\107\097\090\061";"\049\110\115\109\055\080\052\061";"\056\075\101\086\055\101\053\056\098\119\047\114\056\057\078\116\057\082\054\061";"\112\103\108\111";"\120\089\121\066";"\081\117\079\077\077\068\117\122\119\078\057\082\074\072\054\061","\089\078\116\117\076\121\112\061","\104\066\099\070";"\082\108\078\110\056\050\075\119\083\070\112\084\090\101\077\117\101\117\121\054";"\067\119\043\089\073\077\048\097\100\114\061\061";"\086\047\051\043\099\098\098\043\078\122\086\086\079\047\080\065\066\090\122\065\081\114\061\061","\085\108\052\047\106\067\090\061";"\116\073\050\098";"\101\114\052\061";"\113\071\110\109\072\122\085\106","\066\119\071\080\119\099\074\110\065\075\057\106\065\119\069\115\114\112\066\061";"\078\113\090\061";"\052\078\054\098\067\089\074\052\075\111\089\086","\075\088\084\111\054\101\113\051","\120\109\110\108\089\122\108\050";"\098\081\103\118\049\101\105\069\056\087\106\118\056\080\104\070\066\120\061\061","\051\075\103\112\104\099\122\081\056\099\049\106\104\070\105\106","\121\082\120\061";"\100\103\114\053\075\049\108\078\065\075\119\048\114\070\052\061","\087\100\103\053\049\087\104\118\077\081\047\076\055\081\119\061";"\050\073\115\117";"\111\066\108\097";"\086\099\087\086\076\072\082\090\115\107\075\114\097\105\089\067\067\117\061\061","\075\070\120\061","\097\112\098\100";"\055\086\110\115\113\102\065\101","\104\086\057\075\114\086\118\122\055\081\104\107\049\099\090\061","\100\055\099\087\076\109\104\082";"\070\043\114\080\113\112\115\043\085\078\070\067\098\119\103\071";"\087\100\103\083\056\117\061\061";"\112\072\118\083\114\099\098\087\085\120\061\061","\084\089\071\061","\089\099\074\086\049\087\106\088\049\114\061\061","\077\090\102\122\072\101\121\072\051\099\057\097";"\100\087\114\113","\098\086\074\121\049\114\061\061";"\104\110\070\090\057\086\057\116\049\054\061\061","\081\101\110\071\108\068\098\050\055\114\069\061";"\066\080\078\118\077\086\090\061","\049\112\049\102\056\075\049\117\055\119\100\067\104\087\104\090\102\054\061\061","\071\070\106\069\086\056\088\043\117\054\061\061","\104\080\066\115\089\084\067\101","\108\085\090\061";"\089\100\118\074\089\101\053\078\098\098\106\101\065\075\057\082","\069\090\069\081\109\088\121\070\118\054\107\057","\049\108\088\074";"\067\051\099\121\043\075\107\115\121\056\054\056\087\066\071\061";"\104\113\111\087\099\071\081\083\101\118\105\119\077\121\122\069\084\114\061\061";"\111\047\056\043";"\098\082\105\071";"\067\077\080\048\105\099\098\121\082\073\117\101\103\117\061\061","\070\105\075\080\078\056\122\108","\098\085\056\056","\082\098\047\105\106\054\090\073\052\105\089\067\118\049\118\051\111\089\056\061";"\077\081\103\088\077\082\106\122\055\110\066\061";"\080\118\098\077","\111\120\097\103\076\085\075\057";"\113\070\068\051\108\065\078\072";"\073\054\061\061";"\077\049\122\078\110\113\114\071\084\114\061\061";"\050\077\104\081\043\114\061\061";"\072\111\101\061","\121\121\090\073\103\056\071\078\109\120\061\061","\099\067\116\061";"\101\098\043\051\087\073\116\055\119\065\075\061","\056\098\106\119\055\057\049\107\105\083\105\065\119\119\117\080\105\119\119\061","\066\086\057\075\055\099\057\075\056\087\104\118\056\110\115\070","\117\065\069\061","\097\056\116\061";"\099\090\090\080";"\067\066\050\107\069\117\061\061","\075\056\113\101\079\111\056\061","\097\114\054\061";"\090\057\054\120\056\087\065\071","\109\069\112\085";"\112\122\048\097","\068\115\116\099\117\116\066\099","\065\098\101\074\066\075\077\065\049\110\115\074\119\098\078\086\119\120\061\061","\119\080\077\073\099\057\114\115\057\112\056\090\055\101\053\101";"\117\103\098\068\071\117\061\061";"\047\114\054\120\080\057\111\053";"\056\080\057\069\055\086\070\108\104\119\047\112\077\112\100\102","\081\077\102\115","\073\116\055\068\122\113\081\119\118\115\065\067\098\120\061\061","\119\086\057\075\114\087\104\075\066\110\070\076\077\087\104\070";"\103\070\085\089","\067\105\086\110","\056\086\118\118\066\120\061\061","\109\098\047\088";"\119\118\112\108\114\109\065\051","\049\052\115\089","\085\043\049\079\086\111\074\099\118\054\061\061";"\102\047\071\052\108\048\122\056\079\043\087\066\104\076\081\053\121\114\061\061","\118\103\113\121","\048\068\110\068","\067\121\055\118\048\087\087\108","\119\121\114\086\119\070\105\065\119\121\106\051\056\075\053\085\089\098\054\061","\087\120\053\049\087\089\065\088";"\069\108\105\067\101\052\098\054\051\051\052\049\119\088\101\116\087\120\069\112\048\118\067\080\084\054\061\061","\079\068\056\048\107\052\081\102","\089\087\105\081\066\110\070\070\055\110\104\088\057\086\070\075\051\054\061\061";"\057\079\106\072\100\083\103\086\077\115\050\057\047\078\117\052";"\074\065\117\113\109\105\116\054","\102\051\071\121\100\086\081\120","\104\117\052\054";"\103\070\068\043\055\102\120\050";"\050\101\118\117";"\057\110\057\121\077\081\103\107\065\117\061\061","\072\070\075\061","\056\086\120\117\104\110\074\088\104\088\104\107\098\087\070\085\077\086\071\061","\077\081\047\088\051\117\061\061";"\066\100\105\072\056\110\118\104\114\119\070\049\077\075\112\107\099\098\119\061";"\106\099\111\102\084\087\075\061","\088\050\049\120","\043\115\089\055\077\053\054\082\108\104\074\067";"\083\073\098\048";"\099\090\087\057\056\080\072\108\083\079\120\061","\070\067\070\110\112\069\122\090\085\054\061\061","\114\086\118\118\077\054\061\061","\048\089\103\099\082\085\102\089\083\055\086\119\100\084\119\111","\079\054\061\061","\069\099\115\082\084\071\103\115";"\065\100\077\083\098\101\049\089\102\087\104\098\104\083\112\090\105\114\061\061";"\065\078\106\100\067\085\110\067\080\117\061\061";"\047\099\051\110","\114\090\090\061","\073\087\056\090";"\069\105\068\122\048\072\078\103","\105\088\112\117\055\119\047\053\049\121\104\073\119\081\104\081";"\087\098\086\079\073\115\116\061","\052\051\108\119";"\066\110\057\115\077\099\070\107\049\114\061\061","\106\089\087\054\076\098\109\053";"\054\103\080\119\057\084\101\061","\100\101\106\081\075\108\122\106\121\057\065\061";"\078\055\107\073\119\115\054\061";"\072\090\107\056\109\090\052\054\119\114\071\082"}local function require(require)return loadfile[require-(522727-520055)]end for require,math in ipairs({{-391664+391665,-948319-(-948907)},{38015+-38014;-20252+20826};{-260702+261277,1047776-1047188}})do while math[719964+-719963]<math[624992+-624990]do loadfile[math[738387-738386]],loadfile[math[-292081-(-292083)]],math[7523-7522],math[-419445-(-419447)]=loadfile[math[-422383+422385]],loadfile[math[-434744+434745]],math[-393324+393325]+(-175255+175256),math[-378696+378698]-(-745230+745231)end end do local require=string.sub local coroutine={N=-318892-(-318893);I=-600994+601040,k=883241+-883191,U=-173708-(-173723),["\048"]=-582562-(-582620),O=548417+-548415;y=-377492+377527,["\047"]=-643761+643766;Q=280464-280458,w=964223+-964203,J=144434-144377;z=-156402+156443,x=87942-87910;t=-148240+148284;F=-754857+754894;L=274787-274753,["\050"]=-683351-(-683394);V=-156119+156173,c=-456968+456990,T=512826+-512764;["\053"]=835350+-835305,p=-106067+106103,Y=219016-218998;r=-207207+207223,v=518421-518388,o=504146+-504083,["\055"]=-522235-(-522262),["\057"]=-36515+36536,["\054"]=636523-636523,B=394619+-394591,["\051"]=581252-581226,R=142484+-142477,D=-293178-(-293188);["\056"]=821936-821912;l=-27154+27157;C=-1011971+1012013;Z=371181+-371125,S=1014697-1014658;["\043"]=625400+-625369;M=-198673+198702;e=-718209+718213,f=721916+-721902,u=433723-433675,["\049"]=361707+-361682;G=-3669-(-3729);h=140457-140440;i=532998-532985;P=-767680+767735;K=770663-770611,X=298620+-298569;q=-353195-(-353225),g=-798479-(-798540);E=229119+-229079,b=122656+-122637,a=25937-25878,A=126057+-126045;W=1045530-1045507;s=-70459-(-70508);d=74246-74193,m=-694274-(-694321);n=777071-777033,j=-121133+121142,["\052"]=22082-22074,H=396591-396580}local code=table.insert local flush=string.len local rawnew=loadfile local j=type local bytecode=math.floor local size=function(...)local v0={};return (function(...)v0["69AX"]={...};v0["42BF"]=v0["69AX"][2 -1 ][2] or "" ;v0["AB21"]="";for v4,v5 in ipairs(v0["69AX"][1][2 -1 ]) do v0["95CAC"]=0 -0 ;while true do if (v0["95CAC"]==0) then if (v0["AB21"]~="") then v0["AB21"]=v0["AB21"]   .. v0["42BF"] ;end v0["AB21"]=v0["AB21"]   .. v5 ;break;end end end return v0["AB21"];end)({...});end local tmpname=string.char for loadfile=887036+-887035,#rawnew,-260602+260603 do local math=rawnew[loadfile]if j(math)=="\115\116\114\105\110\103"then local j=flush(math)local sethook={}local hasnext=-679723-(-679724)local collectgarbage=-1035423+1035423 local path=26621+-26621 while hasnext<=j do local loadfile=require(math,hasnext,hasnext)local flush=coroutine[loadfile]if flush then collectgarbage=collectgarbage+flush*(-675275-(-675339))^((-427685-(-427688))-path)path=path+(613701+-613700)if path==-38426+38430 then path=-557590+557590 local loadfile=bytecode(collectgarbage/(116850+-51314))local require=bytecode((collectgarbage%(133982+-68446))/(650536-650280))local math=collectgarbage%(659743+-659487)code(sethook,tmpname(loadfile,require,math))collectgarbage=-929422-(-929422)end elseif loadfile=="\061"then code(sethook,tmpname(bytecode(collectgarbage/(107734-42198))))if hasnext>=j or require(math,hasnext+(832002-832001),hasnext+(-791761-(-791762)))~="\061"then code(sethook,tmpname(bytecode((collectgarbage%(-403056+468592))/(641163+-640907))))end break end hasnext=hasnext+(407918-407917)end rawnew[loadfile]=size(sethook)end end end return(function(loadfile,coroutine,code,flush,rawnew,j,bytecode,size,apply,path,onload,tmpfile,math,collectgarbage,assert,delete,setmetatable,float,directory,hasnext,tmpname,sethook,rand)path,onload,size,setmetatable,directory,hasnext,float,delete,tmpname,assert,math,sethook,apply,collectgarbage,tmpfile,rand=function(loadfile)local require,math=-416320+416321,loadfile[672194+-672193]while math do tmpname[math],require=tmpname[math]-(-897061+897062),(-899798+899799)+require if tmpname[math]==-1009599+1009599 then tmpname[math],size[math]=nil,nil end math=loadfile[require]end end,function(loadfile,require)local coroutine=collectgarbage(require)local code=function(code,flush,rawnew,j,bytecode,size)return math(loadfile,{code,flush,rawnew,j,bytecode;size},require,coroutine)end return code end,{},function(loadfile,require)local coroutine=collectgarbage(require)local code=function(code,flush,rawnew)return math(loadfile,{code,flush;rawnew},require,coroutine)end return code end,function(loadfile,require)local coroutine=collectgarbage(require)local code=function(code,flush,rawnew,j,bytecode)return math(loadfile,{code;flush,rawnew,j,bytecode},require,coroutine)end return code end,740631-740631,function(loadfile,require)local coroutine=collectgarbage(require)local code=function(code)return math(loadfile,{code},require,coroutine)end return code end,function(loadfile,require)local coroutine=collectgarbage(require)local code=function(code,flush,rawnew,j)return math(loadfile,{code;flush,rawnew,j},require,coroutine)end return code end,{},function(loadfile,require)local coroutine=collectgarbage(require)local code=function(code,flush)return math(loadfile,{code,flush},require,coroutine)end return code end,function(math,code,flush,rawnew)local type,call,getinfo,hasnext,gmod,class,number,parse,isWindows,upvalueid,getlocal,factory,const,Factory,value,gethook,loadlib,write,tostring,_G,newpath,dofile,import,rename,bytecode,ipairs,i,path,packages,remove,data,exports,tmpname,program,getuservalue,count,upvaluejoin,rawset,create,char,randomseed,obj,searchpath,void,oldpath,loader,key,rawget,getupvalue,print,raise,package,traceback,yield,collectgarbage,resume,rawequal,module while math do if math<-515485+9303522 then if math<4684979-71271 then if math<-304620+2582759 then if math<1364120-331833 then if math<-299396+1043810 then if math<-809819+1227669 then if math<-210568+524169 then if math<-761840+814972 then exports=17055983624290-(-1048228)hasnext=require(228026+-225135)tmpname=loadfile[hasnext]collectgarbage=size[flush[128418+-128414]]getlocal=require(-677626+680561)path=size[flush[-749948-(-749953)]]const=path(getlocal,exports)hasnext=collectgarbage[const]bytecode=tmpname[hasnext]math=bytecode and 284343+8232160 or-208681+2191185 else math={}bytecode={}size[flush[-705390+705393]]=math math=loadfile[require(498376+-495677)]end else if math<-954364+1306837 then tmpname=require(203889-201062)bytecode=size[flush[-754665+754667]]math=3940638-(-341293)tmpname=bytecode[tmpname]tmpname=tmpname(bytecode)else math=true bytecode={}size[flush[832757+-832756]]=math math=loadfile[require(-12418+15606)]end end else if math<1211582-560738 then if math<-139130-(-704152)then math=bytecode and 6956750-486865 or 4698421-514226 else getlocal=path math=getlocal~=tmpname math=math and 8101717-922094 or-403466+15623992 end else if math<1602458-917410 then path=require(-22773-(-25453))loadlib=-255681+1023440332957 math=size[flush[1034634+-1034633]]const=-650792+32467057502518 tmpname=size[flush[-528966-(-528968)]]hasnext=size[flush[40741-40738]]collectgarbage=hasnext(path,const)bytecode=tmpname[collectgarbage]exports=require(374327+-371404)collectgarbage=require(-721817+724708)hasnext=loadfile[collectgarbage]path=size[flush[537384-537382]]const=size[flush[-429746-(-429749)]]getlocal=const(exports,loadlib)collectgarbage=path[getlocal]tmpname=hasnext[collectgarbage]math[bytecode]=tmpname math=loadfile[require(-144312-(-147337))]bytecode={}else math=true bytecode={math}math=loadfile[require(637394+-634162)]end end end else if math<-213737+1099885 then if math<227711+592469 then if math<466392+300906 then math=8503302-93090 else hasnext,const=collectgarbage(tmpname,hasnext)math=hasnext and 14829151-3851 or 3821937-(-683083)end else if math<-345693+1186183 then exports=not getlocal collectgarbage=collectgarbage+const hasnext=collectgarbage<=path hasnext=exports and hasnext exports=collectgarbage>=path exports=getlocal and exports hasnext=exports or hasnext exports=2553237-20636 math=hasnext and exports hasnext=-872639+5023333 math=math or hasnext else collectgarbage=require(-4534-(-7249))loadlib=25607636139991-(-11965)math=size[flush[-107712-(-107713)]]hasnext=loadfile[collectgarbage]path=size[flush[613985+-613983]]const=size[flush[42668-42665]]exports=require(840863-837817)getlocal=const(exports,loadlib)collectgarbage=path[getlocal]tmpname=hasnext[collectgarbage]collectgarbage=size[flush[417626-417622]]hasnext={tmpname(collectgarbage)}bytecode=math(coroutine(hasnext))tmpname=bytecode math=loadfile[require(215543-212746)]bytecode={tmpname}end end else if math<343139-(-631214)then if math<1958757-1005521 then math=size[flush[-1031164+1031171]]math=math and-859520+17357837 or 9519293-1036014 else bytecode={bytecode}math=loadfile[require(-674844+677738)]end else if math<570772-(-408780)then getlocal=require(556321-553338)tmpname=size[flush[661913+-661910]]exports=964604+2425622465645 collectgarbage=size[flush[-924587-(-924591)]]path=size[flush[-928743-(-928748)]]const=path(getlocal,exports)getlocal=8499098455486-(-278967)hasnext=collectgarbage[const]char=522547+21502480854505 const=require(792646+-789468)count=require(708476-705344)create=-1047671+7357718792665 bytecode=tmpname[hasnext]oldpath=-645513+22849976238873 hasnext=size[flush[52061-52057]]randomseed=1018796+25020563022295 collectgarbage=size[flush[-667930+667935]]path=collectgarbage(const,getlocal)tmpname=hasnext[path]hasnext=size[flush[752119-752112]]getlocal=size[flush[-504781+504784]]loadlib=size[flush[-722835+722839]]call=size[flush[295244-295239]]module=call(count,oldpath)exports=loadlib[module]const=getlocal[exports]exports=size[flush[7990-7986]]module=require(-381559+384680)loadlib=size[flush[-42066-(-42071)]]count=-15700+6445514819853 raise=-393158+33409987607691 call=loadlib(module,count)getlocal=exports[call]path=const[getlocal]loadlib=require(-337913+340607)exports=loadfile[loadlib]oldpath=require(-855074+858258)import=33736887703080-(-157493)call=size[flush[574088+-574084]]module=size[flush[-910405-(-910410)]]getinfo=require(-807164+809841)count=module(oldpath,randomseed)loadlib=call[count]getlocal=exports[loadlib]call=-647697.5-(-647698)math=-760207+2742711 module=-854885-(-854885)randomseed=require(-926069+928914)loadlib=255150+-255149 exports=getlocal(loadlib,call,module)call=require(-33418-(-36112))loadlib=loadfile[call]module=size[flush[-1032620+1032624]]count=size[flush[-506317-(-506322)]]oldpath=count(randomseed,raise)call=module[oldpath]count=require(315426-312609)getlocal=loadlib[call]module=loadfile[count]oldpath=size[flush[414413-414409]]randomseed=size[flush[-156380-(-156385)]]raise=randomseed(getinfo,create)create=require(-480266+482964)count=oldpath[raise]call=module[count]count=154553-154553 oldpath=require(-374834-(-377651))module=call(count)count=loadfile[oldpath]randomseed=size[flush[1011588-1011584]]raise=size[flush[20632-20627]]getinfo=raise(create,import)import=require(455949-452893)oldpath=randomseed[getinfo]call=count[oldpath]randomseed=require(708866+-706049)oldpath=-616024-(-616114)count=call(oldpath)oldpath=loadfile[randomseed]raise=size[flush[523740-523736]]getinfo=size[flush[6585+-6580]]create=getinfo(import,char)randomseed=raise[create]call=oldpath[randomseed]randomseed=-274304+274484 raise=25684388811682-271594 oldpath={call(randomseed)}loadlib=getlocal(module,count,coroutine(oldpath))const=exports*loadlib getlocal=360675.25-360675 collectgarbage=hasnext(path,const,getlocal)bytecode[tmpname]=collectgarbage tmpname=size[flush[244252-244249]]collectgarbage=size[flush[-992104-(-992108)]]getlocal=require(-217320-(-220341))path=size[flush[423322+-423317]]exports=31547804855290-766616 const=path(getlocal,exports)hasnext=collectgarbage[const]bytecode=tmpname[hasnext]hasnext=size[flush[810774-810770]]getlocal=25716849205501-(-724426)collectgarbage=size[flush[-109703+109708]]oldpath=16103276722816-744758 const=require(836036-833106)path=collectgarbage(const,getlocal)tmpname=hasnext[path]count=require(-363268+365950)hasnext=size[flush[-768388-(-768395)]]getlocal=size[flush[-906584-(-906587)]]loadlib=size[flush[733481-733477]]import=21333985557863-(-420199)call=size[flush[901537-901532]]module=call(count,oldpath)exports=loadlib[module]count=12069401360366-(-351750)const=getlocal[exports]exports=size[flush[81994-81990]]module=require(-484144-(-486954))oldpath=require(-321266+324114)loadlib=size[flush[-134226+134231]]call=loadlib(module,count)loadlib=require(578466-575772)create=25052866959304-715318 getinfo=require(-135746+138946)getlocal=exports[call]path=const[getlocal]exports=loadfile[loadlib]call=size[flush[926800-926796]]randomseed=6422190482890-(-878052)module=size[flush[572029+-572024]]count=module(oldpath,randomseed)char=28215747665819-371785 loadlib=call[count]getlocal=exports[loadlib]call=-461557+461557.5 loadlib=915157+-915158 module=-523886-(-523886)randomseed=require(-185078+188291)exports=getlocal(loadlib,call,module)call=require(-192339-(-195033))loadlib=loadfile[call]module=size[flush[-562734+562738]]count=size[flush[734371-734366]]oldpath=count(randomseed,raise)count=require(767030-764213)call=module[oldpath]getlocal=loadlib[call]module=loadfile[count]oldpath=size[flush[407253+-407249]]randomseed=size[flush[-217483-(-217488)]]raise=randomseed(getinfo,create)count=oldpath[raise]oldpath=require(987676-984859)call=module[count]create=require(-56235-(-58963))count=450801+-450801 module=call(count)count=loadfile[oldpath]randomseed=size[flush[743022+-743018]]raise=size[flush[80224-80219]]getinfo=raise(create,import)oldpath=randomseed[getinfo]call=count[oldpath]oldpath=-302725+302635 randomseed=require(-555540-(-558357))import=require(746211-743146)count=call(oldpath)oldpath=loadfile[randomseed]raise=size[flush[-436297+436301]]getinfo=size[flush[-678815-(-678820)]]create=getinfo(import,char)randomseed=raise[create]call=oldpath[randomseed]randomseed=-439831+439651 oldpath={call(randomseed)}loadlib=getlocal(module,count,coroutine(oldpath))getlocal=-414758.75-(-414759)const=exports*loadlib collectgarbage=hasnext(path,const,getlocal)bytecode[tmpname]=collectgarbage else tmpname=sethook()exports=19247285741410-(-637856)bytecode=require(-306173-(-309119))size[tmpname]=code[220147-220146]math=loadfile[bytecode]collectgarbage=size[flush[804312-804311]]bytecode=require(43260-40182)getlocal=require(-794621-(-797489))path=size[flush[-640792+640794]]const=path(getlocal,exports)hasnext=collectgarbage[const]bytecode=math[bytecode]bytecode=bytecode(math,hasnext)math=require(992371-989518)math=bytecode[math]math=math(bytecode)math=math and-947831+13578581 or 6118725-413455 end end end end else if math<659881+1144840 then if math<815485-(-697892)then if math<-595928+1784464 then if math<628162+499314 then math=bytecode and 7122627-(-767294)or 1835149-943875 else path=require(-373798+376959)const=859571+21629319530916 math=size[flush[-1010227+1010228]]tmpname=size[flush[-839472-(-839474)]]hasnext=size[flush[-377169-(-377172)]]collectgarbage=hasnext(path,const)bytecode=tmpname[collectgarbage]tmpname=nil math[bytecode]=tmpname bytecode={}math=loadfile[require(987962+-985217)]end else if math<409343-(-817068)then math=loadfile[require(384801-381792)]bytecode={}else const=size[flush[569672-569671]]call=991368+25008896789749 loadlib=require(263188+-260422)getlocal=size[flush[-560427-(-560429)]]exports=getlocal(loadlib,call)path=const[exports]bytecode=collectgarbage==path math=bytecode and 14669526-335 or-251553+15490751 end end else if math<2039224-285905 then if math<1035053-(-633969)then bytecode=require(-858155-(-861108))math=loadfile[bytecode]tmpname=size[flush[431305+-431300]]hasnext=size[flush[-913937-(-913943)]]bytecode=math(tmpname,hasnext)math=-368375+4432796 else path=nil exports=nil math=495875+13106122 getlocal=nil end else if math<-1012722+2793274 then import=size[hasnext]create=import math=import and-332524+11311453 or 5988367-839870 else hasnext=nil bytecode={}math=loadfile[require(-363941-(-366917))]collectgarbage=nil tmpname=nil end end end else if math<1242792-(-660171)then if math<1414990-(-442620)then if math<-326617+2160808 then exports=7700277659602-326097 tmpname={j(955277+-955276,coroutine(code))}bytecode=require(62586+-59751)math=loadfile[bytecode]collectgarbage=size[flush[630513-630512]]bytecode=require(-810329-(-813036))getlocal=require(-720544+723218)bytecode=math[bytecode]path=size[flush[-145633-(-145635)]]call=20579831296599-756968 const=path(getlocal,exports)hasnext=collectgarbage[const]path=require(857320-854374)bytecode=bytecode(math,hasnext)loadlib=require(930521+-927483)collectgarbage=loadfile[path]const=size[flush[-800587+800588]]getlocal=size[flush[-782224+782226]]exports=getlocal(loadlib,call)path=const[exports]hasnext=collectgarbage[path]getlocal=require(-630647+633783)path=require(636098+-633106)const=require(-437337-(-440172))math=require(321728+-318534)math=bytecode[math]collectgarbage=loadfile[path]math=math(bytecode,hasnext,collectgarbage)bytecode=require(468942+-466093)math=loadfile[bytecode]path=loadfile[const]getlocal=path[getlocal]const={getlocal(path)}path={math(coroutine(const))}bytecode=path[-615416+615417]hasnext=path[-577858-(-577860)]collectgarbage=path[211422+-211419]math=8223142-(-601085)path=bytecode else const=nil path=nil math=717677+79248 end else if math<1024542-(-850938)then math=646225+9212182 collectgarbage=size[flush[-812875+812881]]hasnext=collectgarbage==tmpname bytecode=hasnext else bytecode=call math=module math=call and 13594408-(-73742)or 12807223-728712 end end else if math<822184+1385228 then if math<1015032+1002315 then math=loadfile[require(979554-976306)]bytecode={}else math=4568254-503833 end else math=size[flush[634382+-634377]]exports=18454667278255-(-27106)hasnext=size[flush[338021-338015]]bytecode=math(hasnext)hasnext=require(-940348+943063)bytecode=loadfile[hasnext]getlocal=require(67901-64664)collectgarbage=size[flush[583722-583721]]path=size[flush[779748+-779746]]call=require(-173642+176812)const=path(getlocal,exports)module=19259398411138-913530 hasnext=collectgarbage[const]const=require(445493-442778)math=bytecode[hasnext]hasnext=size[flush[548121+-548113]]path=loadfile[const]getlocal=size[flush[-737483-(-737484)]]exports=size[flush[-491112+491114]]loadlib=exports(call,module)const=getlocal[loadlib]collectgarbage=path[const]const=size[flush[-65297-(-65305)]]getlocal=size[flush[-560168-(-560177)]]path={collectgarbage(const,getlocal)}bytecode=math(hasnext,coroutine(path))math=10322614-(-396095)end end end end else if math<-779032+4328383 then if math<313041+2809484 then if math<2112256-(-557631)then if math<692281+1750009 then if math<-466083+2787444 then obj=-831714-(-841714)ipairs=require(305741-302924)upvaluejoin=sethook()rawget=-108306+108406 remove=200017+-199762 size[upvaluejoin]=create bytecode=loadfile[ipairs]ipairs=require(390179-387403)math=bytecode[ipairs]ipairs=651454+-651453 void=634147+-634145 bytecode=math(ipairs,rawget)rawget=237272-237272 ipairs=sethook()size[ipairs]=bytecode math=size[exports]bytecode=math(rawget,remove)rawget=sethook()remove=864067-864066 size[rawget]=bytecode math=size[exports]rename=size[ipairs]i=-1025078+1025079 bytecode=math(remove,rename)traceback=require(687698+-684534)remove=sethook()size[remove]=bytecode bytecode=size[exports]rename=bytecode(i,void)bytecode=55570+-55569 write=-31889-(-31889)math=rename==bytecode bytecode=require(-155373+158459)rename=sethook()void=require(-437294+440250)size[rename]=math packages=loadfile[traceback]value=size[exports]key={value(write,obj)}traceback=packages(coroutine(key))math=require(150984-148087)packages=require(701906+-698950)math=raise[math]number=traceback..packages i=void..number math=math(raise,bytecode,i)i=sethook()size[i]=math void=require(-653581+656534)number=float(12993166-417338,{exports,upvaluejoin;module;collectgarbage,hasnext;getinfo,rename,i,ipairs;remove;rawget,call})bytecode=loadfile[void]void={bytecode(number)}math={coroutine(void)}void=math math=size[rename]math=math and 8402403-(-649614)or-127121+5166285 else count=77587+-77574 collectgarbage=984603+-984571 hasnext=size[flush[840770-840767]]tmpname=hasnext%collectgarbage path=size[flush[159059+-159055]]call=306887+-306885 exports=size[flush[322983-322981]]raise=size[flush[280446+-280443]]randomseed=raise-tmpname raise=902662+-902630 oldpath=randomseed/raise module=count-oldpath loadlib=call^module getlocal=exports/loadlib const=path(getlocal)path=4294637139-(-330157)collectgarbage=const%path const=420898-420896 path=const^tmpname hasnext=collectgarbage/path path=size[flush[-988561-(-988565)]]math=665724+2173645 loadlib=162843-162842 exports=hasnext%loadlib call=165969-165713 loadlib=4295005635-38339 getlocal=exports*loadlib const=path(getlocal)path=size[flush[94248+-94244]]getlocal=path(hasnext)collectgarbage=const+getlocal const=1058485-992949 exports=768795+-703259 path=collectgarbage%const hasnext=nil getlocal=collectgarbage-path tmpname=nil const=getlocal/exports count=776123+-775867 exports=-543907-(-544163)getlocal=path%exports loadlib=path-getlocal exports=loadlib/call call=-555769-(-556025)loadlib=const%call collectgarbage=nil module=const-loadlib call=module/count path=nil const=nil module={getlocal;exports,loadlib;call}exports=nil getlocal=nil call=nil size[flush[-1039099-(-1039100)]]=module loadlib=nil end else if math<671546+1853807 then math=tmpname math=bytecode and 3462731-59902 or-473412-(-523069)else math=size[flush[234936-234935]]loadlib=228108+-228108 call=-559787-(-560042)exports=math(loadlib,call)math=-608035+1443105 hasnext=collectgarbage tmpname[hasnext]=exports hasnext=nil end end else if math<3233410-396312 then if math<1993536-(-825495)then math=true math=503948+15202771 else math=-809517+9633744 const=nil getlocal=nil end else if math<-541603+3498368 then collectgarbage=require(-243509-(-246224))hasnext=loadfile[collectgarbage]collectgarbage=require(-993691+996652)math=loadfile[require(186439+-183407)]tmpname=hasnext[collectgarbage]collectgarbage=size[flush[449009+-449008]]hasnext={tmpname(collectgarbage)}bytecode={coroutine(hasnext)}else math=loadfile[require(101900+-98845)]bytecode={}end end end else if math<370833+2888054 then if math<2431256-(-735010)then if math<705177+2419048 then tmpname=sethook()size[tmpname]=code[738417+-738416]exports=8083873450164-(-230912)loadlib=-920059+34169182095394 bytecode=size[tmpname]module=require(25568-22793)getlocal=require(810548+-807579)collectgarbage=size[flush[-352641+352642]]path=size[flush[-511883+511885]]const=path(getlocal,exports)hasnext=collectgarbage[const]math=bytecode[hasnext]exports=require(805030-801867)hasnext=sethook()size[hasnext]=math bytecode=size[tmpname]path=size[flush[-202553+202554]]const=size[flush[-664394+664396]]getlocal=const(exports,loadlib)collectgarbage=path[getlocal]path=sethook()math=bytecode[collectgarbage]collectgarbage=delete(6136783-162368,{flush[53638+-53637],flush[-365904-(-365906)]})bytecode=require(522324-519603)bytecode=math[bytecode]bytecode=bytecode(math,collectgarbage)collectgarbage=sethook()math=nil const=sethook()size[collectgarbage]=bytecode bytecode=nil size[path]=math size[const]=bytecode count=-279672+32668367224804 bytecode=size[tmpname]exports=size[flush[319818+-319817]]loadlib=size[flush[109338+-109336]]call=loadlib(module,count)oldpath=30557891072652-891639 getlocal=exports[call]math=bytecode[getlocal]bytecode=require(813342+-810621)getlocal=setmetatable(16445850-138347,{flush[429661+-429660],flush[540500-540498],hasnext;flush[119300-119297],collectgarbage,path,const;flush[-551359-(-551363)];flush[-686885-(-686890)];tmpname;flush[-211323-(-211329)];flush[-777656-(-777663)]})bytecode=math[bytecode]bytecode=bytecode(math,getlocal)getlocal=require(-243039+246164)size[path]=bytecode math=size[tmpname]getlocal=math[getlocal]getlocal=getlocal(math)count=require(761170+-758229)math=size[flush[687930+-687922]]exports=size[tmpname]getlocal=math(exports)getlocal=size[tmpname]loadlib=size[flush[273936-273935]]call=size[flush[-336245+336247]]module=call(count,oldpath)bytecode={}exports=loadlib[module]math=getlocal[exports]getlocal=require(863179-860034)getlocal=math[getlocal]exports=directory(-603038+6063290,{collectgarbage,path,flush[-450700+450701],flush[3293+-3291];hasnext,flush[-955218+955226],flush[91206-91197],const})tmpname=tmpfile(tmpname)getlocal=getlocal(math,exports)collectgarbage=tmpfile(collectgarbage)hasnext=tmpfile(hasnext)size[const]=getlocal const=tmpfile(const)math=loadfile[require(72308-69615)]path=tmpfile(path)else collectgarbage=size[flush[612725-612724]]tmpname=code[-633951-(-633952)]exports=26008087546369-(-25933)getlocal=require(806976-803940)path=size[flush[-662293+662295]]const=path(getlocal,exports)hasnext=collectgarbage[const]bytecode=tmpname[hasnext]hasnext=size[flush[-720762-(-720765)]]math=bytecode==hasnext math=math and 37543+12561455 or 5277792-136142 end else if math<2364530-(-849879)then collectgarbage={}math=4825616-921619 bytecode=collectgarbage else path=require(-810543+813535)bytecode=loadfile[path]math=hasnext==bytecode math=math and 8042978-618423 or 13313690-(-563530)end end else if math<238331+3152407 then if math<901403+2388978 then traceback=484728+-484727 packages=void[traceback]math=5383561-370320 number=packages else module=938130+29951050769897 getlocal=size[flush[-609434-(-609435)]]exports=size[flush[261379-261377]]call=require(610935+-607767)loadlib=exports(call,module)math=166486+317136 oldpath=require(216352-213236)randomseed=-305806+8728928500334 const=getlocal[loadlib]loadlib=require(730275-727349)exports=loadfile[loadlib]call=size[flush[434621+-434620]]module=size[flush[533706+-533704]]count=module(oldpath,randomseed)loadlib=call[count]getlocal=exports[loadlib]loadlib=size[flush[-795489+795492]]exports=getlocal(loadlib)path=const..exports collectgarbage=hasnext==path bytecode=collectgarbage end else count=require(-285166+288412)oldpath=33825354791688-163201 getlocal=require(-211925+214711)tmpname=size[flush[994235+-994232]]exports=-770001+27274917392749 collectgarbage=size[flush[-252961+252965]]path=size[flush[56251+-56246]]const=path(getlocal,exports)getlocal=899325+9850658838766 hasnext=collectgarbage[const]bytecode=tmpname[hasnext]const=require(-779771-(-782858))hasnext=size[flush[-696336+696340]]collectgarbage=size[flush[-996777-(-996782)]]path=collectgarbage(const,getlocal)tmpname=hasnext[path]create=764083+25843581191759 hasnext=size[flush[-262122-(-262129)]]getlocal=size[flush[744926-744923]]loadlib=size[flush[-665959-(-665963)]]call=size[flush[-534389+534394]]module=call(count,oldpath)count=18294265873039-991561 exports=loadlib[module]const=getlocal[exports]parse=28645324647530-243791 char=1041659+12416467366298 module=require(220665+-217744)exports=size[flush[-874975-(-874979)]]loadlib=size[flush[-806021-(-806026)]]call=loadlib(module,count)raise=require(1010580+-1007485)getlocal=exports[call]module=require(-579864+582558)path=const[getlocal]getinfo=26518030098414-798642 exports=size[flush[83552+-83544]]call=loadfile[module]count=size[flush[707208-707204]]oldpath=size[flush[348083-348078]]randomseed=oldpath(raise,getinfo)module=count[randomseed]loadlib=call[module]oldpath=811372-811372 module=-977147-(-977147)randomseed=require(584483-581563)count=-310551+310551 call=loadlib(module,count,oldpath)raise=-960290+4041254874747 getlocal=exports*call call=require(-439071-(-441765))loadlib=loadfile[call]module=size[flush[-859004+859008]]count=size[flush[-179884+179889]]oldpath=count(randomseed,raise)import=8371668033301-(-585765)call=module[oldpath]count=require(-643884-(-646701))exports=loadlib[call]getinfo=require(902547-899288)module=loadfile[count]oldpath=size[flush[-433930-(-433934)]]randomseed=size[flush[838785+-838780]]raise=randomseed(getinfo,create)count=oldpath[raise]call=module[count]oldpath=require(704780-701963)count=586582-586582 module=call(count)create=require(-560679+563398)count=loadfile[oldpath]randomseed=size[flush[111042-111038]]raise=size[flush[-774298+774303]]getinfo=raise(create,import)oldpath=randomseed[getinfo]call=count[oldpath]oldpath=143969+-143969 randomseed=require(-116392-(-119209))count=call(oldpath)oldpath=loadfile[randomseed]raise=size[flush[-381726-(-381730)]]getinfo=size[flush[718043+-718038]]import=require(852515-849443)create=getinfo(import,char)randomseed=raise[create]call=oldpath[randomseed]randomseed=-612240-(-612240)oldpath={call(randomseed)}loadlib=exports(module,count,coroutine(oldpath))const=getlocal*loadlib count=require(-650786-(-653885))getlocal=.066666666666667 collectgarbage=hasnext(path,const,getlocal)bytecode[tmpname]=collectgarbage exports=433892+20550354372221 oldpath=249555+14842091605036 tmpname=size[flush[920437-920434]]collectgarbage=size[flush[584944-584940]]path=size[flush[-619359+619364]]getlocal=require(-1029991+1032862)const=path(getlocal,exports)create=require(377250-374569)hasnext=collectgarbage[const]bytecode=tmpname[hasnext]getlocal=-269985+30935322056422 const=require(-685998+689245)char=-748602+16826541132501 hasnext=size[flush[62100+-62096]]collectgarbage=size[flush[-370417-(-370422)]]path=collectgarbage(const,getlocal)tmpname=hasnext[path]hasnext=size[flush[199483+-199476]]getlocal=size[flush[-289844+289847]]loadlib=size[flush[-955317+955321]]call=size[flush[-624446+624451]]getinfo=-287069+21287606945813 module=call(count,oldpath)exports=loadlib[module]const=getlocal[exports]module=require(218636+-215495)exports=size[flush[-562659-(-562663)]]count=520485+29049453036466 randomseed=require(984560+-981490)raise=18600926141090-866509 loadlib=size[flush[-657916+657921]]call=loadlib(module,count)getlocal=exports[call]call=require(113572-110878)path=const[getlocal]loadlib=loadfile[call]module=size[flush[545863-545859]]count=size[flush[147475+-147470]]oldpath=count(randomseed,raise)call=module[oldpath]exports=loadlib[call]count=-529331+529331 import=18885646306545-813719 call=755746+-755745.5 module=952692-952691 loadlib=exports(call,module,count)module=require(-595578+598272)call=loadfile[module]raise=require(-20712+23467)count=size[flush[-806070+806074]]oldpath=size[flush[742146+-742141]]randomseed=oldpath(raise,getinfo)module=count[randomseed]exports=call[module]oldpath=require(-892795-(-895612))count=loadfile[oldpath]randomseed=size[flush[402167-402163]]raise=size[flush[899553-899548]]getinfo=raise(create,import)oldpath=randomseed[getinfo]module=count[oldpath]randomseed=require(-368327+371144)oldpath=1037392-1037392 count=module(oldpath)oldpath=loadfile[randomseed]raise=size[flush[609065+-609061]]getinfo=size[flush[-30102-(-30107)]]import=require(-845115-(-848232))create=getinfo(import,char)randomseed=raise[create]raise=require(-524542+527359)module=oldpath[randomseed]randomseed=250876+-250786 oldpath=module(randomseed)randomseed=loadfile[raise]getinfo=size[flush[110373+-110369]]create=size[flush[-11809+11814]]char=require(-909863-(-913067))import=create(char,parse)raise=getinfo[import]module=randomseed[raise]create=-560856+3144650232976 raise=1018529-1018529 randomseed={module(raise)}call=exports(count,oldpath,coroutine(randomseed))randomseed=require(-167345-(-170576))getlocal=loadlib*call call=require(740856-738162)raise=-992762+17438162240946 loadlib=loadfile[call]module=size[flush[-949755-(-949759)]]count=size[flush[919243+-919238]]char=-251195+7970639340474 oldpath=count(randomseed,raise)call=module[oldpath]exports=loadlib[call]count=require(-588009+590826)getinfo=require(73706+-70679)module=loadfile[count]oldpath=size[flush[-32965+32969]]randomseed=size[flush[711745+-711740]]raise=randomseed(getinfo,create)count=oldpath[raise]create=require(737495+-734466)call=module[count]oldpath=require(709503-706686)count=367837-367837 import=25008756043700-(-343497)module=call(count)count=loadfile[oldpath]randomseed=size[flush[-397192-(-397196)]]raise=size[flush[-339560-(-339565)]]getinfo=raise(create,import)oldpath=randomseed[getinfo]call=count[oldpath]import=require(-906651-(-909846))oldpath=819867+-819867 count=call(oldpath)randomseed=require(-151430-(-154247))oldpath=loadfile[randomseed]raise=size[flush[363789-363785]]getinfo=size[flush[919248+-919243]]parse=-378915+9473546738014 create=getinfo(import,char)randomseed=raise[create]call=oldpath[randomseed]randomseed=857843+-857843 oldpath={call(randomseed)}randomseed=require(1014798-1012090)loadlib=exports(module,count,coroutine(oldpath))const=getlocal*loadlib count=require(-870682+873387)getlocal=.23333333333333 collectgarbage=hasnext(path,const,getlocal)bytecode[tmpname]=collectgarbage exports=-573916+19247926224095 tmpname=size[flush[-624636+624639]]oldpath=14392830812277-362055 collectgarbage=size[flush[-183487+183491]]getlocal=require(-987876+991077)path=size[flush[956242+-956237]]const=path(getlocal,exports)hasnext=collectgarbage[const]bytecode=tmpname[hasnext]char=16900632345540-941319 hasnext=size[flush[-923050+923054]]const=require(269177+-266044)collectgarbage=size[flush[24000-23995]]getlocal=-571676+1893786565773 path=collectgarbage(const,getlocal)tmpname=hasnext[path]hasnext=size[flush[869134-869127]]getlocal=size[flush[-206425+206428]]loadlib=size[flush[768078+-768074]]call=size[flush[205716+-205711]]module=call(count,oldpath)exports=loadlib[module]const=getlocal[exports]module=require(422970+-419930)count=9747942206974-105539 exports=size[flush[-55131-(-55135)]]getinfo=-879238+542445202306 loadlib=size[flush[-525450-(-525455)]]raise=26946652974183-719715 call=loadlib(module,count)getlocal=exports[call]path=const[getlocal]call=require(585328+-582634)loadlib=loadfile[call]module=size[flush[578428-578424]]count=size[flush[14416+-14411]]oldpath=count(randomseed,raise)call=module[oldpath]import=2779316820525-(-469729)raise=require(347837+-345016)count=938866-938866 module=-141023+141024 exports=loadlib[call]call=-184466.5-(-184466)loadlib=exports(call,module,count)module=require(-88843-(-91537))call=loadfile[module]count=size[flush[-502049+502053]]create=require(163372-160386)oldpath=size[flush[-449206-(-449211)]]randomseed=oldpath(raise,getinfo)oldpath=require(-42300-(-45117))module=count[randomseed]exports=call[module]count=loadfile[oldpath]randomseed=size[flush[257836-257832]]raise=size[flush[-298656-(-298661)]]getinfo=raise(create,import)oldpath=randomseed[getinfo]randomseed=require(-987706+990523)module=count[oldpath]import=require(-555370-(-558604))oldpath=-944196+944196 count=module(oldpath)oldpath=loadfile[randomseed]raise=size[flush[-465152+465156]]getinfo=size[flush[-340049+340054]]create=getinfo(import,char)randomseed=raise[create]module=oldpath[randomseed]randomseed=481850-481940 oldpath=module(randomseed)char=require(189894-186875)raise=require(692855+-690038)randomseed=loadfile[raise]getinfo=size[flush[259151-259147]]create=size[flush[596407-596402]]import=create(char,parse)raise=getinfo[import]module=randomseed[raise]raise=-685012-(-685012)randomseed={module(raise)}call=exports(count,oldpath,coroutine(randomseed))getlocal=loadlib*call import=376666+8114528505704 getinfo=require(496678-493442)raise=-947352+30054234876739 randomseed=require(-958856+961924)create=26751292147339-1005026 call=require(-343470+346164)loadlib=loadfile[call]module=size[flush[-147241-(-147245)]]count=size[flush[-1044496+1044501]]oldpath=count(randomseed,raise)call=module[oldpath]exports=loadlib[call]count=require(958748-955931)module=loadfile[count]oldpath=size[flush[889198-889194]]randomseed=size[flush[-400925+400930]]raise=randomseed(getinfo,create)count=oldpath[raise]call=module[count]count=51214-51214 create=require(-838063-(-840933))oldpath=require(722098+-719281)module=call(count)count=loadfile[oldpath]randomseed=size[flush[231579-231575]]raise=size[flush[894557+-894552]]getinfo=raise(create,import)oldpath=randomseed[getinfo]randomseed=require(-787497-(-790314))call=count[oldpath]char=220372+13164126485278 oldpath=576146+-576146 count=call(oldpath)oldpath=loadfile[randomseed]raise=size[flush[-520550-(-520554)]]getinfo=size[flush[-757281-(-757286)]]import=require(-1026476-(-1029499))create=getinfo(import,char)randomseed=raise[create]call=oldpath[randomseed]randomseed=993366+-993366 oldpath={call(randomseed)}loadlib=exports(module,count,coroutine(oldpath))const=getlocal*loadlib getlocal=.23333333333333 exports=56646+18084948296607 oldpath=3823336228398-(-327878)collectgarbage=hasnext(path,const,getlocal)getinfo=require(-770112-(-773036))bytecode[tmpname]=collectgarbage count=require(-1001057+1004101)getlocal=require(1009679+-1006685)tmpname=size[flush[-842614-(-842617)]]collectgarbage=size[flush[281808+-281804]]path=size[flush[-639488+639493]]const=path(getlocal,exports)hasnext=collectgarbage[const]bytecode=tmpname[hasnext]hasnext=size[flush[-527975+527979]]randomseed=24572251195651-(-25519)getlocal=12155782770316-(-26512)const=require(26495+-23487)collectgarbage=size[flush[682971-682966]]path=collectgarbage(const,getlocal)tmpname=hasnext[path]hasnext=size[flush[961873-961866]]import=-213428+4229971183973 getlocal=size[flush[9378+-9375]]loadlib=size[flush[505183+-505179]]call=size[flush[218807+-218802]]raise=-108981+24373691487754 module=call(count,oldpath)exports=loadlib[module]count=837525+26456616134794 const=getlocal[exports]exports=size[flush[-40593+40597]]module=require(211108-208289)create=875221+22207565778320 loadlib=size[flush[163907+-163902]]call=loadlib(module,count)getlocal=exports[call]loadlib=require(88010-85316)path=const[getlocal]oldpath=require(691577+-688620)exports=loadfile[loadlib]call=size[flush[735304+-735300]]module=size[flush[-9609+9614]]count=module(oldpath,randomseed)module=889303-889303 loadlib=call[count]call=-755968.5-(-755969)getlocal=exports[loadlib]loadlib=-103586+103587 exports=getlocal(loadlib,call,module)call=require(172000+-169306)char=18238773215137-384628 loadlib=loadfile[call]module=size[flush[-767426-(-767430)]]count=size[flush[743175+-743170]]randomseed=require(479486+-476279)oldpath=count(randomseed,raise)call=module[oldpath]count=require(510270+-507453)getlocal=loadlib[call]module=loadfile[count]oldpath=size[flush[817445+-817441]]randomseed=size[flush[-365769-(-365774)]]raise=randomseed(getinfo,create)count=oldpath[raise]call=module[count]count=-724071-(-724071)module=call(count)oldpath=require(-475889-(-478706))create=require(-831499+834329)count=loadfile[oldpath]randomseed=size[flush[287033-287029]]raise=size[flush[1035187-1035182]]getinfo=raise(create,import)oldpath=randomseed[getinfo]call=count[oldpath]oldpath=396074-395984 count=call(oldpath)randomseed=require(843904-841087)import=require(624362-621422)oldpath=loadfile[randomseed]raise=size[flush[-51887-(-51891)]]getinfo=size[flush[15220-15215]]create=getinfo(import,char)randomseed=raise[create]call=oldpath[randomseed]randomseed=-45130+45130 oldpath={call(randomseed)}loadlib=getlocal(module,count,coroutine(oldpath))const=exports*loadlib getlocal=-1032029+1032029.25 collectgarbage=hasnext(path,const,getlocal)bytecode[tmpname]=collectgarbage tmpname=size[flush[175937-175934]]collectgarbage=size[flush[-428694-(-428698)]]getlocal=require(609426-606520)path=size[flush[338032+-338027]]oldpath=1940046001852-(-216267)exports=5624119032955-(-789951)const=path(getlocal,exports)hasnext=collectgarbage[const]const=require(-318122+320808)bytecode=tmpname[hasnext]hasnext=size[flush[-132008+132012]]collectgarbage=size[flush[940405+-940400]]getlocal=25517577297985-(-331305)path=collectgarbage(const,getlocal)tmpname=hasnext[path]char=-272649+27348846844616 hasnext=size[flush[-568809-(-568816)]]getlocal=size[flush[-945269-(-945272)]]loadlib=size[flush[-964435+964439]]count=require(-414013+417013)call=size[flush[858200-858195]]module=call(count,oldpath)exports=loadlib[module]const=getlocal[exports]module=require(697894-695136)oldpath=require(811301+-808367)count=22450660645490-422300 randomseed=779256+18978529148557 exports=size[flush[189076+-189072]]loadlib=size[flush[519230-519225]]call=loadlib(module,count)loadlib=require(488118-485424)getlocal=exports[call]path=const[getlocal]exports=loadfile[loadlib]call=size[flush[1006260-1006256]]module=size[flush[498237-498232]]count=module(oldpath,randomseed)raise=19378207090768-(-391919)module=-34417+34417 loadlib=call[count]getlocal=exports[loadlib]call=-873174+873174.5 loadlib=-383229+383228 create=749375+25595309145935 import=-664458+8802914874253 getinfo=require(-404547+407656)exports=getlocal(loadlib,call,module)call=require(-629227-(-631921))loadlib=loadfile[call]module=size[flush[-23567-(-23571)]]randomseed=require(-788205+791173)count=size[flush[358794+-358789]]oldpath=count(randomseed,raise)call=module[oldpath]getlocal=loadlib[call]count=require(-844118+846935)module=loadfile[count]oldpath=size[flush[-111173-(-111177)]]randomseed=size[flush[187793-187788]]raise=randomseed(getinfo,create)count=oldpath[raise]call=module[count]create=require(1047194+-1044137)oldpath=require(-625103-(-627920))count=1026864-1026864 module=call(count)count=loadfile[oldpath]randomseed=size[flush[-764346-(-764350)]]raise=size[flush[44227-44222]]getinfo=raise(create,import)oldpath=randomseed[getinfo]import=require(-935155-(-938011))call=count[oldpath]oldpath=349032+-349122 count=call(oldpath)randomseed=require(674925+-672108)oldpath=loadfile[randomseed]raise=size[flush[3494+-3490]]getinfo=size[flush[863286-863281]]create=getinfo(import,char)randomseed=raise[create]call=oldpath[randomseed]randomseed=962382+-962382 oldpath={call(randomseed)}char=-449153+16573296064678 loadlib=getlocal(module,count,coroutine(oldpath))const=exports*loadlib getlocal=-933320.75-(-933321)count=require(981749-978945)collectgarbage=hasnext(path,const,getlocal)bytecode[tmpname]=collectgarbage tmpname=size[flush[-309594+309597]]exports=-855308+9658864295581 collectgarbage=size[flush[818628+-818624]]getlocal=require(693464-690275)math=280704+1701800 path=size[flush[493426+-493421]]const=path(getlocal,exports)hasnext=collectgarbage[const]raise=7099749320068-63642 getlocal=699393+10696699504500 create=22186122300023-(-548324)bytecode=tmpname[hasnext]hasnext=size[flush[-854113+854117]]collectgarbage=size[flush[866279-866274]]const=require(-738549+741434)path=collectgarbage(const,getlocal)oldpath=-586952+6557305503925 tmpname=hasnext[path]import=-1001501+19359612758868 hasnext=size[flush[-298116+298123]]getlocal=size[flush[-448057-(-448060)]]loadlib=size[flush[944623-944619]]randomseed=1027764+2458979325381 call=size[flush[479637+-479632]]module=call(count,oldpath)count=-354479+19406805896188 exports=loadlib[module]const=getlocal[exports]exports=size[flush[-222961+222965]]loadlib=size[flush[114777-114772]]module=require(286401+-283544)oldpath=require(-928589+931299)call=loadlib(module,count)getlocal=exports[call]loadlib=require(774160-771466)path=const[getlocal]exports=loadfile[loadlib]call=size[flush[-651774-(-651778)]]module=size[flush[471108-471103]]count=module(oldpath,randomseed)randomseed=require(-477852-(-480549))loadlib=call[count]module=786849+-786849 getlocal=exports[loadlib]call=-408145-(-408147)loadlib=-270815-(-270815)exports=getlocal(loadlib,call,module)call=require(-718930+721624)loadlib=loadfile[call]module=size[flush[-227095+227099]]count=size[flush[-680145-(-680150)]]oldpath=count(randomseed,raise)call=module[oldpath]getlocal=loadlib[call]getinfo=require(-241771-(-245011))count=require(134263-131446)module=loadfile[count]oldpath=size[flush[153152+-153148]]randomseed=size[flush[586654-586649]]raise=randomseed(getinfo,create)count=oldpath[raise]oldpath=require(-633578-(-636395))call=module[count]count=-585731+585641 module=call(count)count=loadfile[oldpath]randomseed=size[flush[-659955+659959]]raise=size[flush[-285197-(-285202)]]create=require(652814+-650018)getinfo=raise(create,import)oldpath=randomseed[getinfo]call=count[oldpath]randomseed=require(-895172+897989)oldpath=-969862+969682 count=call(oldpath)oldpath=loadfile[randomseed]import=require(-993261+995996)raise=size[flush[-585917-(-585921)]]getinfo=size[flush[-1033222+1033227]]create=getinfo(import,char)randomseed=raise[create]call=oldpath[randomseed]randomseed=537690-537690 oldpath={call(randomseed)}loadlib=getlocal(module,count,coroutine(oldpath))getlocal=.6 const=exports*loadlib collectgarbage=hasnext(path,const,getlocal)bytecode[tmpname]=collectgarbage end end end else if math<-746527+4921380 then if math<4437070-523082 then if math<-496564+4386907 then if math<3451497-(-209877)then math=992312+15125397 else bytecode=require(-306658-(-309485))math=size[flush[-487594+487595]]bytecode=math[bytecode]bytecode=bytecode(math)math=loadfile[require(320868+-317630)]bytecode={}end else if math<-361451+4266454 then collectgarbage=sethook()size[collectgarbage]=bytecode bytecode=require(-478240+481193)const=directory(-90794+969103,{tmpname,flush[-12291-(-12292)];flush[-135901+135903],collectgarbage})math=loadfile[bytecode]getlocal={math(const)}bytecode=getlocal[825213-825212]const=bytecode path=getlocal[281474-281472]getlocal=not const bytecode=getlocal math=getlocal and 679772-(-294438)or 16756990-597060 else const=path oldpath=require(564211-561418)remove=-43820+11278641479600 ipairs=24790053461109-536414 math=size[flush[-712973+712978]]char=1555046881660-(-92504)call=size[flush[459858-459857]]module=size[flush[-742358-(-742360)]]randomseed=29137422226003-712019 getinfo=-47516+26640459573777 create=737740+8891297173088 count=module(oldpath,randomseed)import=16426440472714-(-845143)raise=require(520675-517928)loadlib=call[count]module=require(-129222+131933)rename=-465584+15513008961255 traceback=26253150844856-(-1013769)call=loadfile[module]count=size[flush[-704013-(-704014)]]oldpath=size[flush[478289-478287]]randomseed=oldpath(raise,getinfo)module=count[randomseed]oldpath=size[flush[953954+-953953]]randomseed=size[flush[-589553-(-589555)]]getinfo=require(95221+-92520)parse=234612+3790913335921 raise=randomseed(getinfo,create)count=oldpath[raise]create=require(311544+-308407)randomseed=size[flush[-597799-(-597800)]]raise=size[flush[-649375-(-649377)]]key=3422372046299-(-41054)getinfo=raise(create,import)oldpath=randomseed[getinfo]raise=size[flush[367839-367838]]getinfo=size[flush[-818087+818089]]import=require(-662852+665553)create=getinfo(import,char)randomseed=raise[create]getinfo=size[flush[-649122-(-649123)]]void=24650090870125-(-309097)rawget=666403+18894015936315 char=require(-1036765-(-1039482))create=size[flush[966496-966494]]packages=26385570791703-(-1027815)import=create(char,parse)parse=require(957714+-955013)raise=getinfo[import]i=-186388+22107201437770 create=size[flush[279577-279576]]import=size[flush[-486821-(-486823)]]upvaluejoin=453951+20823010539681 char=import(parse,upvaluejoin)getinfo=create[char]import=size[flush[381403+-381402]]value=28975818617689-720549 char=size[flush[661308-661306]]upvaluejoin=require(999516-996687)parse=char(upvaluejoin,ipairs)create=import[parse]ipairs=require(-154330+157031)char=size[flush[-458078+458079]]parse=size[flush[-764458+764460]]upvaluejoin=parse(ipairs,rawget)rawget=require(-581934+584892)number=2443164810752-(-624241)import=char[upvaluejoin]parse=size[flush[-285431+285432]]upvaluejoin=size[flush[387193-387191]]ipairs=upvaluejoin(rawget,remove)data=971725+5761610430125 remove=require(401411-398710)char=parse[ipairs]getlocal=nil upvaluejoin=size[flush[-733211+733212]]ipairs=size[flush[-894195-(-894197)]]rawget=ipairs(remove,rename)parse=upvaluejoin[rawget]ipairs=size[flush[-902382-(-902383)]]obj=39393+8472017483144 rawget=size[flush[420564+-420562]]rename=require(-1026328+1029148)write=-635702+5461741714725 remove=rawget(rename,i)i=require(-96103+98804)upvaluejoin=ipairs[remove]rawget=size[flush[-782649+782650]]remove=size[flush[-624559+624561]]rename=remove(i,void)ipairs=rawget[rename]remove=size[flush[-565818+565819]]void=require(-682-(-3450))rename=size[flush[-701735+701737]]i=rename(void,number)rawget=remove[i]number=require(1034089-1031388)rename=size[flush[-499299+499300]]i=size[flush[-171709+171711]]void=i(number,packages)remove=rename[void]i=size[flush[-25985+25986]]void=size[flush[-16745-(-16747)]]packages=require(-407844-(-410998))number=void(packages,traceback)rename=i[number]void=size[flush[644536-644535]]number=size[flush[-198900-(-198902)]]traceback=require(783511-780810)packages=number(traceback,value)i=void[packages]number=size[flush[113798-113797]]value=require(901184-898270)packages=size[flush[917758-917756]]traceback=packages(value,key)void=number[traceback]packages=size[flush[-914816+914817]]traceback=size[flush[230252+-230250]]key=require(312631-309930)value=traceback(key,write)number=packages[value]traceback=size[flush[765050-765049]]value=size[flush[-266777-(-266779)]]write=require(145314+-142195)key=value(write,obj)packages=traceback[key]value=size[flush[-677529-(-677530)]]key=size[flush[-689552-(-689554)]]obj=require(1014376+-1011675)write=key(obj,data)traceback=value[write]exports={[loadlib]=call,[module]=count;[oldpath]=randomseed,[raise]=getinfo;[create]=import,[char]=parse;[upvaluejoin]=ipairs;[rawget]=remove,[rename]=i,[void]=number,[packages]=traceback}math[const]=exports const=nil math=-825710+7452468 end end else if math<801068+3249990 then if math<964605+3023143 then exports=size[flush[744896-744895]]raise=31077979653368-3185 count=11619191880703-(-1005859)module=require(-729207+732035)loadlib=size[flush[994456-994454]]call=loadlib(module,count)math=exports[call]call=require(871206-868278)randomseed=require(155236+-152142)loadlib=loadfile[call]module=size[flush[315487+-315486]]import=require(-399698-(-402891))count=size[flush[-171552+171554]]oldpath=count(randomseed,raise)call=module[oldpath]exports=loadlib[call]call=568842+-568842 char=988242+32380205803156 raise=size[flush[-224442-(-224443)]]getinfo=size[flush[-157945-(-157947)]]create=getinfo(import,char)import=require(535751-532869)randomseed=raise[create]char=250234+11886320419877 oldpath=getlocal[randomseed]raise=size[flush[-461758-(-461759)]]getinfo=size[flush[302765+-302763]]create=getinfo(import,char)randomseed=raise[create]count=oldpath[randomseed]const=nil oldpath=2.6 module=count+oldpath loadlib=exports(call,module)getlocal[math]=loadlib getlocal=nil math=286859+11470336 else bytecode=require(545238-542285)math=loadfile[bytecode]hasnext=setmetatable(187768+3484831,{tmpname})bytecode=math(hasnext)bytecode=require(-606271+609120)math=loadfile[bytecode]path=size[flush[-989090+989092]]const={math(path)}bytecode=const[578411-578410]hasnext=const[-814368+814370]collectgarbage=const[-153652-(-153655)]path=bytecode math=-318357+7858134 end else if math<461168+3647498 then tmpname=require(-656667+659887)getlocal=973866+2339238324247 const=require(629142+-626300)bytecode=loadfile[tmpname]hasnext=size[flush[-202063+202064]]collectgarbage=size[flush[-152319+152321]]path=collectgarbage(const,getlocal)tmpname=hasnext[path]math=bytecode[tmpname]tmpname=size[flush[355981-355978]]bytecode=math(tmpname)math=bytecode and 80771+8396020 or-205829+6209253 else math=size[flush[-699796-(-699806)]]hasnext=size[flush[238557+-238546]]tmpname[math]=hasnext math=size[flush[855404+-855392]]hasnext={math(tmpname)}math=loadfile[require(-48074-(-50937))]bytecode={coroutine(hasnext)}end end end else if math<-643374+4988877 then if math<742894+3486721 then if math<-304209+4507687 then collectgarbage=math path=size[flush[-30415+30423]]bytecode=path math=path and 12653596-1045267 or 13718638-(-698052)else hasnext=require(586187-583338)math=loadfile[hasnext]const=size[flush[698411+-698406]]getlocal={math(const)}hasnext=getlocal[-538008+538009]path=getlocal[37063-37060]math=-136140+9808632 collectgarbage=getlocal[628977-628975]end else if math<3391170-(-840440)then math=factory math=package and 15522033-(-492324)or 498508+3859860 else getlocal=require(-729217-(-732375))exports=-342364+12143865810802 hasnext=require(352002-348909)tmpname=loadfile[hasnext]collectgarbage=size[flush[800719-800716]]path=size[flush[-180349+180353]]loadlib=-435947+24569790305180 const=path(getlocal,exports)getlocal=require(-576073+578795)exports=-850297+13577627275819 hasnext=collectgarbage[const]bytecode=tmpname[hasnext]collectgarbage=size[flush[312039+-312036]]path=size[flush[164382+-164378]]const=path(getlocal,exports)exports=require(-81454+84327)hasnext=collectgarbage[const]collectgarbage=size[flush[599595-599590]]path={collectgarbage()}tmpname=bytecode(hasnext,coroutine(path))size[flush[6798-6796]]=tmpname hasnext=sethook()bytecode=size[flush[-441624+441626]]size[hasnext]=bytecode bytecode=size[flush[8538-8536]]path=size[flush[594648+-594645]]const=size[flush[-764109+764113]]getlocal=const(exports,loadlib)collectgarbage=path[getlocal]path=size[flush[-376975-(-376981)]]const=path()bytecode[collectgarbage]=const module=require(849165+-846080)bytecode=size[flush[371636-371634]]getlocal=require(-403489+406435)const=loadfile[getlocal]count=551764+3599952337720 exports=size[flush[770989-770986]]loadlib=size[flush[-284834-(-284838)]]call=loadlib(module,count)getlocal=exports[call]module=239736+22468924096614 path=const[getlocal]collectgarbage=require(8893-5699)getlocal=require(568151+-565159)math=-376169+13547351 const=loadfile[getlocal]collectgarbage=bytecode[collectgarbage]collectgarbage=collectgarbage(bytecode,path,const)bytecode=size[flush[-927518-(-927525)]]path=size[flush[62680+-62678]]collectgarbage=bytecode(path)bytecode=false call=require(1043789+-1040906)size[flush[113160+-113159]]=bytecode path=size[flush[-368559-(-368561)]]getlocal=size[flush[452327-452324]]exports=size[flush[-826582+826586]]loadlib=exports(call,module)const=getlocal[loadlib]collectgarbage=path[const]path=require(376599+-373454)path=collectgarbage[path]const=apply(-802555+15533630,{hasnext,flush[-939148-(-939150)];flush[-469142+469143]})hasnext=tmpfile(hasnext)path=path(collectgarbage,const)end end else if math<4293110-(-229690)then if math<5131108-744465 then gethook=tmpfile(gethook)getuservalue=tmpfile(getuservalue)rawequal=require(219127+-216135)searchpath=tmpfile(searchpath)parse=tmpfile(parse)collectgarbage=tmpfile(collectgarbage)gmod=require(-303881+306612)module=tmpfile(module)rawget=tmpfile(rawget)factory=loadfile[rawequal]data=tmpfile(data)loadlib=tmpfile(loadlib)obj=tmpfile(obj)package=write(factory)i=tmpfile(i)package=size[Factory]value=tmpfile(value)rawequal=loadfile[gmod]factory=package(rawequal)newpath=tmpfile(newpath)randomseed=tmpfile(randomseed)getinfo=tmpfile(getinfo)upvaluejoin=tmpfile(upvaluejoin)gmod=require(513164+-510333)package=size[void]call=tmpfile(call)rawequal=loadfile[gmod]type=tmpfile(type)gmod=-523744+523745 rename=tmpfile(rename)getlocal=tmpfile(getlocal)Factory=tmpfile(Factory)factory=package(rawequal,gmod)hasnext=tmpfile(hasnext)traceback=tmpfile(traceback)package=size[void]count=nil key=tmpfile(key)rawequal=506134-506134 raise=tmpfile(raise)factory=package(isWindows)math=loadfile[require(-24854+27595)]const=tmpfile(const)path=tmpfile(path)package=size[void]bytecode={}void=tmpfile(void)gmod=size[exports]oldpath=tmpfile(oldpath)exports=tmpfile(exports)write=nil factory=package(class,rawequal,gmod,isWindows)upvalueid=tmpfile(upvalueid)isWindows=nil remove=tmpfile(remove)class=nil else math=loadfile[require(773662-770821)]bytecode={}end else upvaluejoin=tmpfile(upvaluejoin)rawget=tmpfile(rawget)remove=tmpfile(remove)rename=tmpfile(rename)void=nil i=tmpfile(i)math=16671465-491590 ipairs=tmpfile(ipairs)end end end end end else if math<-1044252+7566321 then if math<170181+5389556 then if math<4372320-(-740365)then if math<5876198-983221 then if math<4661627-(-145873)then if math<994741+3718669 then const=collectgarbage exports=size[tmpname]math=exports~=getlocal math=math and 15805626-411926 or-359287+11440797 else const=require(-1030980-(-1034208))bytecode=271606+-270606 oldpath=32709175244596-129973 size[flush[458649-458645]]+=bytecode path=loadfile[const]loadlib=size[flush[-101750+101751]]call=size[flush[1044155+-1044153]]count=require(-141954-(-145110))module=call(count,oldpath)exports=loadlib[module]loadlib=size[flush[95195+-95191]]getlocal=exports..loadlib const=path(getlocal)math=1769638-1011213 end else if math<4642582-(-188424)then math=loadfile[require(-323696-(-326671))]tmpname=nil hasnext=nil bytecode={}else math=-817966+15689614 end end else if math<5166533-182977 then if math<5459939-541951 then loadlib=require(-486699-(-489598))path=require(479367+-476476)collectgarbage=loadfile[path]const=size[flush[247328-247324]]call=8931101640916-(-378730)getlocal=size[flush[397321-397316]]exports=getlocal(loadlib,call)path=const[exports]hasnext=collectgarbage[path]bytecode=hasnext math=1528143-(-916189)else bytecode=require(-58471-(-61302))math=loadfile[bytecode]bytecode=math()math=-503231+3620580 end else if math<4368393-(-668981)then size[hasnext]=number key=size[remove]write=706505-706504 value=key+write traceback=void[value]packages=count+traceback traceback=-40271-(-40527)math=packages%traceback value=size[rawget]traceback=oldpath+value value=757618+-757362 packages=traceback%value oldpath=packages count=math math=3590114-(-953979)else packages=size[hasnext]math=packages and 124700+3149324 or 696955+4316286 number=packages end end end else if math<4449187-(-773010)then if math<-230262+5378138 then if math<5075912-(-61040)then path=require(-42099+44930)bytecode=loadfile[path]path=bytecode()math=993987-235562 else bytecode={}tmpname=nil math=loadfile[require(454574-451592)]end else if math<280473+4876597 then size[hasnext]=create math=size[hasnext]math=math and 5826572-956975 or-615470+3300462 else math=-133281+16250990 end end else if math<5496040-38824 then if math<5932944-657686 then math=size[flush[-1040249+1040252]]randomseed=759498+14619061699533 oldpath=require(43145+-40055)call=size[flush[835648+-835647]]module=size[flush[127783+-127781]]count=module(oldpath,randomseed)loadlib=call[count]exports=getlocal[loadlib]create=19334555494888-(-14659)getinfo=require(392169-389323)loadlib=size[flush[-803032+803036]]oldpath=size[flush[1014865-1014864]]randomseed=size[flush[-855302-(-855304)]]raise=randomseed(getinfo,create)count=oldpath[raise]module=getlocal[count]call=loadlib(module)math[exports]=call math=2569115-(-266434)else const=const+getlocal bytecode=const<=path loadlib=not exports bytecode=loadlib and bytecode loadlib=const>=path loadlib=exports and loadlib bytecode=loadlib or bytecode loadlib=-358889+10181191 math=bytecode and loadlib bytecode=9385950-(-742668)math=math or bytecode end else if math<5885262-408412 then math=size[flush[101806+-101805]]exports=require(-638752+641757)bytecode=require(-730194+733110)bytecode=math[bytecode]bytecode=bytecode(math)math=size[flush[-265367-(-265369)]]bytecode=require(-298683+301599)bytecode=math[bytecode]bytecode=bytecode(math)math=nil tmpname=math hasnext=require(-302457+305403)bytecode=loadfile[hasnext]path=size[flush[-884094+884097]]hasnext=require(-580299-(-583377))const=size[flush[-966311-(-966315)]]loadlib=12862966440619-68422 getlocal=const(exports,loadlib)collectgarbage=path[getlocal]exports=22849791905698-(-334318)hasnext=bytecode[hasnext]getlocal=require(-480361-(-483144))hasnext=hasnext(bytecode,collectgarbage)collectgarbage=size[flush[525467+-525464]]path=size[flush[-904467+904471]]const=path(getlocal,exports)bytecode=collectgarbage[const]math=hasnext[bytecode]hasnext=float(2250169-(-890618),{flush[-760679-(-760682)],flush[934835+-934831],flush[63555+-63550],flush[-39323-(-39329)],flush[-615324+615331];flush[-438922+438930]})bytecode=require(171730+-169009)bytecode=math[bytecode]bytecode=bytecode(math,hasnext)tmpname=bytecode bytecode={}math=loadfile[require(504884-501919)]tmpname=nil else tmpname=require(-281713+284933)bytecode=loadfile[tmpname]hasnext=size[flush[578582-578581]]getlocal=27700715521959-(-780988)const=require(-613116+616216)collectgarbage=size[flush[122476-122474]]path=collectgarbage(const,getlocal)tmpname=hasnext[path]math=bytecode[tmpname]collectgarbage=size[flush[202143-202140]]hasnext=#collectgarbage collectgarbage=.2 tmpname=hasnext*collectgarbage bytecode=math(tmpname)tmpname=float(11074508-301764,{flush[-626737-(-626738)],flush[-436473+436475],flush[-120956+120960];flush[669246-669241];flush[941953-941947],flush[-276170-(-276177)];flush[-628832-(-628840)];flush[81105-81096]})bytecode=require(-688784-(-691737))math=loadfile[bytecode]bytecode=math(tmpname)tmpname=bytecode math=not tmpname math=math and 2298968-24947 or 10200075-(-518634)end end end end else if math<458759+5539359 then if math<5026930-(-843405)then if math<6611963-900096 then if math<263403+5310078 then tmpname=sethook()hasnext=sethook()const=-304649+304649 size[tmpname]=code[639220+-639219]collectgarbage={j(714920-714917,coroutine(code))}exports=require(955074+-952359)size[hasnext]=code[913332+-913330]count=require(657428+-654708)path=size[hasnext]bytecode=path or const size[hasnext]=bytecode path=size[flush[-591521+591522]]const=path()path=sethook()size[path]=const oldpath=552153+14392960773461 getlocal=loadfile[exports]loadlib=size[flush[-129018+129020]]call=size[flush[999966-999963]]module=call(count,oldpath)exports=loadlib[module]const=getlocal[exports]exports=size[flush[-31234+31238]]loadlib=size[tmpname]getlocal=const(exports,loadlib)count=require(-209439+212550)exports=require(-895675+898895)getlocal=loadfile[exports]oldpath=14680571850573-136345 loadlib=size[flush[68662+-68660]]call=size[flush[498558+-498555]]module=call(count,oldpath)exports=loadlib[module]const=getlocal[exports]math=loadfile[require(496934-494157)]exports=apply(-238524+2309017,{flush[362843-362841];flush[304327+-304324];hasnext,flush[34394-34390];tmpname;path})getlocal=const(exports)const=size[tmpname]bytecode={const}else hasnext=sethook()math=false collectgarbage=require(-922057-(-925277))size[hasnext]=math bytecode=loadfile[collectgarbage]path=size[flush[-224269-(-224270)]]const=size[flush[-693627+693629]]loadlib=33735283706317-855152 exports=require(-624492-(-627434))getlocal=const(exports,loadlib)collectgarbage=path[getlocal]math=bytecode[collectgarbage]collectgarbage=directory(14551759-235089,{flush[33132-33129];tmpname,hasnext})bytecode=math(collectgarbage)math=size[hasnext]math=math and 1361257-145321 or 16586706-28161 end else if math<4834714-(-968862)then getlocal=size[const]bytecode=getlocal math=8380765-(-764685)else bytecode=require(-872409-(-875258))math=loadfile[bytecode]hasnext=code[-73437-(-73439)]const=size[flush[-114823+114824]]getlocal={math(const)}path=getlocal[130945-130942]math=988189+7001067 tmpname=code[564493+-564492]collectgarbage=getlocal[41646+-41644]bytecode=getlocal[-740232-(-740233)]const=bytecode end end else if math<499539+5440349 then if math<5214976-(-678750)then hasnext=require(-334406+337122)bytecode=657146+1661775 collectgarbage=3476075-(-473461)tmpname=hasnext^collectgarbage math=bytecode-tmpname bytecode=require(-770993+774034)tmpname=math math=bytecode/tmpname bytecode={math}math=loadfile[require(-51834+54987)]else tmpname=nil math=loadfile[require(991518-988299)]bytecode={}end else if math<4979174-(-1002839)then bytecode=require(812773-809625)tmpname=sethook()size[tmpname]=code[-702671+702672]hasnext=directory(-620215+1781931,{tmpname,flush[-941241+941242],flush[861518+-861516]})tmpname=tmpfile(tmpname)math=loadfile[bytecode]bytecode=math(hasnext)math=loadfile[require(276115+-273383)]bytecode={}else exports=size[flush[37654-37647]]count=require(-442915-(-445803))math=exports[const]loadlib=size[flush[-953709+953711]]oldpath=42489+2729139379965 call=size[flush[-514998-(-515001)]]bytecode={}module=call(count,oldpath)exports=loadlib[module]loadlib=tmpname math[exports]=loadlib math=loadfile[require(361102-358318)]end end end else if math<5709897-(-584402)then if math<7178148-1003283 then if math<5339954-(-696332)then bytecode={}math=loadfile[require(-742240-(-745049))]else math=850898+12751099 end else if math<7024447-808915 then parse=97289+3922843126553 hasnext=require(249488+-246395)loadlib=3051566917344-942420 getlocal=require(656292-653505)tmpname=sethook()randomseed=require(625540+-622771)size[tmpname]=code[-793694-(-793695)]bytecode=loadfile[hasnext]collectgarbage=size[flush[-974853-(-974854)]]exports=11345085401124-(-740478)path=size[flush[-1007176-(-1007178)]]const=path(getlocal,exports)hasnext=collectgarbage[const]math=bytecode[hasnext]exports=-834341+21765614772924 call=-854031+22067742175283 collectgarbage=size[flush[163104+-163103]]getlocal=require(92211+-89134)char=14120863664779-(-380708)path=size[flush[-1020671+1020673]]const=path(getlocal,exports)hasnext=collectgarbage[const]bytecode=math(hasnext)hasnext=sethook()size[hasnext]=bytecode math=size[flush[-566870+566873]]path=size[flush[55418+-55417]]const=size[flush[-154581-(-154583)]]exports=require(907804+-904811)getlocal=const(exports,loadlib)collectgarbage=path[getlocal]loadlib=require(-816921-(-819958))path=size[hasnext]bytecode=math(collectgarbage,path)collectgarbage=sethook()size[collectgarbage]=bytecode bytecode=size[collectgarbage]const=size[flush[-695989-(-695990)]]getlocal=size[flush[354702-354700]]exports=getlocal(loadlib,call)call=1397115035360-(-615338)path=const[exports]raise=-975459+18096287744845 math=bytecode[path]path=sethook()size[path]=math math=size[hasnext]const=size[flush[757054-757053]]getlocal=size[flush[-463020-(-463022)]]loadlib=require(-479202-(-482428))count=require(297850-294767)exports=getlocal(loadlib,call)bytecode=const[exports]call=-182336+26783234914551 const=true math[bytecode]=const math=size[hasnext]const=size[flush[-726665-(-726666)]]getlocal=size[flush[399811-399809]]loadlib=require(627925-625252)exports=getlocal(loadlib,call)import=require(256873+-253800)bytecode=const[exports]exports=require(790052+-786835)oldpath=8532554814460-(-408457)getlocal=loadfile[exports]loadlib=size[flush[328133+-328132]]call=size[flush[-549735-(-549737)]]module=call(count,oldpath)exports=loadlib[module]const=getlocal[exports]getlocal=const()math[bytecode]=getlocal math=size[hasnext]const=size[flush[-182803+182804]]call=320167+5716441556926 count=require(208679-205784)loadlib=require(695689-692477)getlocal=size[flush[-641013-(-641015)]]exports=getlocal(loadlib,call)bytecode=const[exports]exports=require(-60957-(-63848))getlocal=loadfile[exports]loadlib=size[flush[-818483-(-818484)]]oldpath=10366271061674-404431 call=size[flush[334406+-334404]]module=call(count,oldpath)exports=loadlib[module]const=getlocal[exports]loadlib=require(1020008+-1016959)math[bytecode]=const math=size[collectgarbage]call=24008848767357-495058 const=size[flush[39993+-39992]]getlocal=size[flush[-880215-(-880217)]]exports=getlocal(loadlib,call)bytecode=const[exports]call=-509579+11695003802576 const=size[hasnext]math[bytecode]=const math=size[hasnext]loadlib=require(1037-(-1855))const=size[flush[-620174+620175]]getlocal=size[flush[863768+-863766]]exports=getlocal(loadlib,call)bytecode=const[exports]const=size[flush[-130923-(-130927)]]getlocal=const()math[bytecode]=getlocal math=size[collectgarbage]loadlib=require(-849847-(-852801))call=27992754187121-(-345978)const=size[flush[153444-153443]]getlocal=size[flush[-385324+385326]]exports=getlocal(loadlib,call)call=-680434+24584493944490 bytecode=const[exports]const=size[flush[-150222-(-150226)]]getlocal=const()module=-709592+33667634237717 loadlib=require(131981+-128955)math[bytecode]=getlocal math=size[path]const=size[flush[634780+-634779]]getlocal=size[flush[-610129+610131]]exports=getlocal(loadlib,call)call=535598+8720678511534 bytecode=const[exports]const=size[flush[209402+-209398]]getlocal=const()loadlib=require(26212+-23338)math[bytecode]=getlocal math=size[hasnext]const=size[flush[580540+-580539]]getlocal=size[flush[494603+-494601]]exports=getlocal(loadlib,call)getlocal=require(610541+-607830)bytecode=const[exports]call=require(-625432+628613)const=loadfile[getlocal]math[bytecode]=const const=require(744029-740809)bytecode=loadfile[const]getlocal=size[flush[-672178+672179]]exports=size[flush[-799134+799136]]loadlib=exports(call,module)const=getlocal[loadlib]math=bytecode[const]const=delete(887630+11293207,{flush[495949+-495944];flush[691819+-691813];collectgarbage,flush[-226647-(-226654)],path;tmpname})bytecode=math(const)count=-495631+10445308863246 const=float(1162996-500975,{hasnext;flush[-145844-(-145845)],flush[-971565+971567]})math=size[flush[31629-31621]]module=require(-975346-(-978070))bytecode=math(const)const=sethook()size[const]=bytecode bytecode=require(817764+-814818)math=loadfile[bytecode]exports=size[flush[-72457-(-72458)]]bytecode=require(-454758-(-457836))loadlib=size[flush[574202-574200]]call=loadlib(module,count)getlocal=exports[call]call=require(244158+-241356)bytecode=math[bytecode]bytecode=bytecode(math,getlocal)getlocal=size[path]loadlib=loadfile[call]module=size[flush[608732+-608731]]count=size[flush[497387-497385]]oldpath=count(randomseed,raise)call=module[oldpath]exports=loadlib[call]call=.8 randomseed=require(-299553-(-302571))oldpath=loadfile[randomseed]raise=size[flush[708486-708485]]getinfo=size[flush[638765-638763]]create=getinfo(import,char)randomseed=raise[create]create=require(-427565+430335)count=oldpath[randomseed]randomseed=size[flush[-74060+74061]]raise=size[flush[964211+-964209]]import=30634568786719-(-693402)getinfo=raise(create,import)raise=require(-792275-(-795293))oldpath=randomseed[getinfo]module=count[oldpath]randomseed=loadfile[raise]getinfo=size[flush[453048+-453047]]char=require(1699-(-1060))create=size[flush[-496551+496553]]import=create(char,parse)char=-283032+31807109024627 raise=getinfo[import]oldpath=randomseed[raise]import=require(963417+-960725)raise=size[flush[109917-109916]]getinfo=size[flush[-606998-(-607000)]]create=getinfo(import,char)randomseed=raise[create]count=oldpath[randomseed]raise=8060507568762-(-480303)loadlib=exports(call,module,count)math=require(679883-676893)module=size[flush[527562+-527561]]randomseed=require(805273-802158)count=size[flush[1035262-1035260]]oldpath=count(randomseed,raise)call=module[oldpath]count=1041933+15542035068472 module=254306+-254306 exports={[call]=module}math=bytecode[math]math=math(bytecode,getlocal,loadlib,exports)getlocal=math module=require(388975+-385969)exports=size[flush[179493+-179492]]loadlib=size[flush[706036+-706034]]call=loadlib(module,count)bytecode=exports[call]exports=delete(41783+5475160,{flush[648347-648346],flush[83708+-83706];tmpname;path;flush[277433+-277424];const,hasnext;flush[-778936-(-778946)],collectgarbage})hasnext=tmpfile(hasnext)math=getlocal[bytecode]bytecode=require(-231717+234862)collectgarbage=tmpfile(collectgarbage)const=tmpfile(const)bytecode=math[bytecode]path=tmpfile(path)bytecode=bytecode(math,exports)math=require(-356851-(-359768))tmpname=tmpfile(tmpname)math=getlocal[math]math=math(getlocal)math=loadfile[require(-801172+804187)]getlocal=nil bytecode={}else char=require(582743+-579579)math=loadfile[char]upvaluejoin=require(583014-580199)parse=loadfile[upvaluejoin]char=math(parse)math=require(439606+-436751)loadfile[math]=char math=685854+2966670 end end else if math<7040086-570821 then if math<6165510-(-256783)then bytecode=require(-563938+566787)math=loadfile[bytecode]collectgarbage=size[flush[128170-128169]]path={math(collectgarbage)}math=1198742-401817 bytecode=path[-792127-(-792128)]hasnext=path[-1014701+1014704]tmpname=path[-1003563-(-1003565)]collectgarbage=bytecode else collectgarbage=594843+-594842 hasnext=size[flush[-913779-(-913782)]]tmpname=hasnext~=collectgarbage math=tmpname and 803212+1535280 or 11621682-815549 end else math=size[flush[83849+-83845]]bytecode=math()bytecode=require(-313723-(-316639))math=size[flush[742942+-742937]]bytecode=math[bytecode]bytecode=bytecode(math)math=size[flush[-159317-(-159323)]]bytecode=require(541668+-538752)bytecode=math[bytecode]bytecode=bytecode(math)math=size[flush[-588806-(-588813)]]bytecode=require(-446441+449357)bytecode=math[bytecode]bytecode=bytecode(math)math=true collectgarbage=require(636264+-633415)size[flush[703842-703834]]=math math=-20289+10363100 bytecode=loadfile[collectgarbage]getlocal=size[flush[-989068-(-989077)]]exports={bytecode(getlocal)}const=exports[-1396+1399]path=exports[-805957-(-805959)]collectgarbage=exports[-727938+727939]end end end end else if math<624913+7267882 then if math<-667220+8006662 then if math<-570914+7563405 then if math<525685+6133083 then if math<-530783+7123916 then bytecode=require(906451+-903624)bytecode=exports[bytecode]bytecode=bytecode(exports)getlocal=const getlocal=nil math=469007+9873804 exports=nil else path,getlocal=hasnext(collectgarbage,path)math=path and 3742088-(-166667)or 5121567-912011 end else if math<6876945-(-70629)then const=require(-674617+677619)math=-455484+8865696 const=tmpname[const]const=const(tmpname)else hasnext=require(-27764+30479)bytecode=loadfile[hasnext]collectgarbage=size[flush[237009-237008]]getlocal=require(785396+-782362)exports=233272+4682282580300 path=size[flush[900998+-900996]]const=path(getlocal,exports)hasnext=collectgarbage[const]math=bytecode[hasnext]hasnext=size[flush[1007920-1007917]]const=tmpname[27226-27225]path=size[flush[662980-662977]]collectgarbage=path[const]bytecode={math(hasnext,collectgarbage)}bytecode={coroutine(bytecode)}math=loadfile[require(925019+-921832)]end end else if math<6195964-(-1026047)then if math<502271+6642226 then hasnext=size[flush[-679571+679572]]collectgarbage=size[flush[789213+-789211]]getlocal=13154301200100-863991 tmpname=code[-427271+427272]const=require(-295105-(-298034))path=collectgarbage(const,getlocal)bytecode=hasnext[path]hasnext=setmetatable(14038665-(-685985),{flush[-809896-(-809897)];flush[-815066-(-815068)],flush[-177076+177079];flush[540952+-540948]})math=tmpname[bytecode]tmpname=nil bytecode=require(219033+-216312)bytecode=math[bytecode]bytecode=bytecode(math,hasnext)math=loadfile[require(422055+-419118)]bytecode={}else exports=nil math=7972034-(-17222)getlocal=nil end else if math<-459418+7713243 then math=-260934+6264358 else tmpname=sethook()size[tmpname]=code[-987850+987851]hasnext=code[576591-576589]bytecode=hasnext math=hasnext and-165545+4069542 or 2340764-(-851501)end end end else if math<6769213-(-769529)then if math<8311514-888124 then if math<6704780-(-651232)then getlocal=size[flush[367383+-367382]]call=require(425941-423041)module=29427443004910-103 exports=size[flush[-587112-(-587114)]]loadlib=exports(call,module)const=getlocal[loadlib]path=collectgarbage==const math=path and-861447+17164196 or 753647+4778 else char=require(887854+-884928)loadlib=module import=loadfile[char]char=require(888124-885021)create=import[char]import=create(tmpname,loadlib)loadlib=nil create=size[flush[-880619-(-880625)]]char=create()getinfo=import+char char=-885442+885443 raise=getinfo+getlocal getinfo=972831+-972575 randomseed=raise%getinfo getlocal=randomseed getinfo=collectgarbage[hasnext]import=getlocal+char create=path[import]math=11054469-439838 raise=getinfo..create collectgarbage[hasnext]=raise end else if math<561081+6972339 then math=collectgarbage bytecode=require(1039954-1037063)loadfile[bytecode]=math math=-1031707+9441919 else collectgarbage=collectgarbage+const bytecode=collectgarbage<=path exports=not getlocal bytecode=exports and bytecode exports=collectgarbage>=path exports=getlocal and exports bytecode=exports or bytecode exports=15351323-1031073 math=bytecode and exports bytecode=223332+16513930 math=math or bytecode end end else if math<-506040+8364739 then if math<8580962-767227 then collectgarbage,getlocal=path(hasnext,collectgarbage)math=collectgarbage and 4366027-(-259208)or 16302298-(-193512)else bytecode={}tmpname=nil math=loadfile[require(486562-483615)]end else loadlib=require(-864231-(-867184))path=require(127886+-124722)call=directory(11081874-(-334112),{})bytecode=require(1036117-1033184)math=loadfile[bytecode]tmpname=size[flush[-453399+453403]]collectgarbage=loadfile[path]exports=loadfile[loadlib]loadlib={exports(call)}getlocal={coroutine(loadlib)}exports=-300149-(-300151)const=getlocal[exports]path=collectgarbage(const)collectgarbage=require(-791423+794509)hasnext=tmpname(path,collectgarbage)tmpname={hasnext()}bytecode=math(coroutine(tmpname))hasnext=size[flush[823730+-823725]]tmpname=bytecode bytecode=hasnext math=hasnext and 1397005-(-477467)or 905793+8952614 end end end else if math<-671248+9081803 then if math<575267+7456247 then if math<7384256-(-578821)then if math<-29330+7963887 then tmpname={j(-940198-(-940199),coroutine(code))}math=tmpname[-388604-(-388605)]math=math and 7441443-488548 or-353439-(-607433)else key=-888160+888161 value=void[key]key=false traceback=value==key packages=math number=traceback math=traceback and 8894152-(-667980)or 8372+12845918 end else if math<284666+7704559 then create=require(-848810-(-851523))randomseed=size[flush[1017434-1017433]]raise=size[flush[-705219-(-705221)]]module=call import=780574+10296700938652 getinfo=raise(create,import)oldpath=randomseed[getinfo]math=module==oldpath math=math and 15364585-(-930327)or-638853+15546774 else path,exports=const(collectgarbage,path)math=path and-331221+976213 or 4425875-(-403497)end end else if math<-109982+8404311 then if math<496537+7629927 then getlocal=require(201517-198419)bytecode=size[flush[354912-354911]]exports=-650008+22114529694545 path=size[flush[-366822-(-366824)]]const=path(getlocal,exports)math=bytecode[const]bytecode=hasnext collectgarbage[math]=bytecode math=loadfile[require(343044-340089)]bytecode={collectgarbage}else getlocal=require(357937-355015)path=nil math=loadfile[getlocal]getlocal=math(const)math=1461064-664139 const=nil end else if math<839401+7562856 then randomseed=require(110007-107213)call=require(-937234+940051)loadlib=loadfile[call]module=size[flush[-707128-(-707129)]]raise=290091+16529968509158 count=size[flush[70836-70834]]oldpath=count(randomseed,raise)call=module[oldpath]math=71262+8462932 exports=loadlib[call]module=-246142-(-246143)count=457772-457771 call=collectgarbage*module module=-785652+785652 loadlib=exports(call,module,count)const=loadlib else math=-974302+2757755 end end end else if math<7597687-(-922204)then if math<848143+7630167 then if math<715809+7759219 then module,oldpath=loadlib(call,module)math=module and 13483529-167224 or-905581+15854149 else hasnext=require(-187625+190340)tmpname=loadfile[hasnext]exports=4834960142388-(-481431)collectgarbage=size[flush[986788-986787]]path=size[flush[161696-161694]]getlocal=require(-945556-(-948380))const=path(getlocal,exports)hasnext=collectgarbage[const]bytecode=tmpname[hasnext]hasnext=size[flush[-888839-(-888843)]]collectgarbage=size[flush[105301+-105296]]tmpname=bytecode(hasnext,collectgarbage)math=not tmpname math=math and 6835414-(-414068)or 597635-(-996690)end else if math<7654969-(-851955)then hasnext=108872+-108871 math={}collectgarbage=size[flush[-767490-(-767499)]]path=collectgarbage tmpname=math collectgarbage=-344481-(-344482)const=collectgarbage collectgarbage=324427+-324427 math=-100361-(-935431)getlocal=const<collectgarbage collectgarbage=hasnext-const else tmpname=size[flush[212790-212787]]remove=-597609+34043448548437 collectgarbage=size[flush[660002+-659998]]char=require(851503-848686)getlocal=require(-469933-(-472780))exports=10926530894663-83815 path=size[flush[704364+-704359]]const=path(getlocal,exports)hasnext=collectgarbage[const]oldpath=-218665+30220111596833 bytecode=tmpname[hasnext]count=require(-992724-(-995846))const=require(436070-433204)getlocal=-663944+24687825161840 hasnext=size[flush[801788-801784]]collectgarbage=size[flush[-516821-(-516826)]]path=collectgarbage(const,getlocal)tmpname=hasnext[path]hasnext=size[flush[486300+-486293]]getlocal=size[flush[454206-454203]]loadlib=size[flush[-264299+264303]]rawget=require(614240-611448)call=size[flush[823476-823471]]module=call(count,oldpath)exports=loadlib[module]count=967574+29011478196527 module=require(963844+-960863)const=getlocal[exports]exports=size[flush[-656633+656637]]loadlib=size[flush[676727+-676722]]call=loadlib(module,count)getinfo=1659235469192-263300 getlocal=exports[call]path=const[getlocal]exports=size[flush[-469025-(-469033)]]raise=require(-590887-(-593839))module=require(-104006+106700)call=loadfile[module]count=size[flush[-430830+430834]]oldpath=size[flush[486019+-486014]]randomseed=oldpath(raise,getinfo)module=count[randomseed]getinfo=.05 count=-1019290-(-1019290)loadlib=call[module]import=loadfile[char]module=359443-359443 parse=size[flush[1022033-1022029]]upvaluejoin=size[flush[-887961+887966]]randomseed=.1 ipairs=upvaluejoin(rawget,remove)upvaluejoin=643653+-643649 char=parse[ipairs]create=import[char]parse=size[flush[523266-523265]]char=parse/upvaluejoin import=create(char)raise=getinfo*import oldpath=randomseed+raise call=loadlib(module,count,oldpath)getlocal=exports*call rename=-603251+27605422253737 raise=684531+20283723346674 call=require(-730671+733365)loadlib=loadfile[call]module=size[flush[-413330-(-413334)]]getinfo=require(-263959+267011)parse=require(-1021765+1024582)randomseed=require(-384427+387306)create=842826+26231485584236 count=size[flush[27429+-27424]]char=7306919175031-579117 oldpath=count(randomseed,raise)count=require(-330831-(-333648))call=module[oldpath]import=23232767392676-168290 exports=loadlib[call]module=loadfile[count]oldpath=size[flush[648022-648018]]randomseed=size[flush[608545-608540]]raise=randomseed(getinfo,create)count=oldpath[raise]call=module[count]oldpath=require(-631298+634115)count=349082-349082 module=call(count)count=loadfile[oldpath]randomseed=size[flush[-755764-(-755768)]]raise=size[flush[810938+-810933]]create=require(129682+-126428)getinfo=raise(create,import)oldpath=randomseed[getinfo]call=count[oldpath]randomseed=require(138210+-135393)oldpath=527834+-527834 count=call(oldpath)import=require(-191656-(-194725))oldpath=loadfile[randomseed]raise=size[flush[697572-697568]]getinfo=size[flush[-943784-(-943789)]]create=getinfo(import,char)randomseed=raise[create]call=oldpath[randomseed]randomseed=-83993-(-83993)oldpath={call(randomseed)}randomseed=require(570996-568318)loadlib=exports(module,count,coroutine(oldpath))const=getlocal*loadlib getlocal=-823844+823844 collectgarbage=hasnext(path,const,getlocal)bytecode[tmpname]=collectgarbage tmpname=size[flush[-825887+825890]]collectgarbage=size[flush[-741790+741794]]exports=30461457707835-310227 path=size[flush[-100122-(-100127)]]getlocal=require(-172694+175430)const=path(getlocal,exports)hasnext=collectgarbage[const]count=require(220014-217265)bytecode=tmpname[hasnext]getlocal=-592922+6287168542601 char=-435991+4588821180271 hasnext=size[flush[360291-360287]]collectgarbage=size[flush[-605393+605398]]const=require(-737823+740683)path=collectgarbage(const,getlocal)tmpname=hasnext[path]hasnext=size[flush[398336+-398329]]oldpath=12931038101045-(-317776)remove=require(-52830-(-56086))getlocal=size[flush[731162+-731159]]loadlib=size[flush[270276-270272]]call=size[flush[844159-844154]]module=call(count,oldpath)count=20794663516676-594993 exports=loadlib[module]const=getlocal[exports]module=require(181914+-178696)exports=size[flush[-828269-(-828273)]]loadlib=size[flush[-783879+783884]]call=loadlib(module,count)getlocal=exports[call]raise=-631874+8227214799673 call=require(978830+-976136)path=const[getlocal]loadlib=loadfile[call]module=size[flush[162308-162304]]count=size[flush[865529-865524]]oldpath=count(randomseed,raise)call=module[oldpath]exports=loadlib[call]call=-975537+975537.5 count=440436-440436 module=484759+-484758 raise=require(-478714-(-481838))loadlib=exports(call,module,count)module=require(1021577+-1018883)import=require(189993+-187231)call=loadfile[module]count=size[flush[-635208+635212]]oldpath=size[flush[-582532+582537]]getinfo=-956827+197327493622 randomseed=oldpath(raise,getinfo)module=count[randomseed]exports=call[module]randomseed=require(-641129-(-643946))oldpath=loadfile[randomseed]raise=size[flush[-777316-(-777320)]]getinfo=size[flush[808499+-808494]]create=getinfo(import,char)randomseed=raise[create]create=858646-858601 count=oldpath[randomseed]raise=101858-101853 char=loadfile[parse]upvaluejoin=size[flush[-853647+853651]]ipairs=size[flush[812923-812918]]rawget=ipairs(remove,rename)parse=upvaluejoin[rawget]import=char[parse]upvaluejoin=size[flush[-489261+489262]]ipairs=384274-384266 parse=upvaluejoin/ipairs char=import(parse)getinfo=create*char randomseed=raise-getinfo import=require(707425-704240)raise=-727467-(-727467)getinfo=-649957-(-649957)oldpath=count(randomseed,raise,getinfo)randomseed=require(-151813-(-154630))module=-oldpath oldpath=loadfile[randomseed]char=25792636400865-(-31241)raise=size[flush[-925545-(-925549)]]getinfo=size[flush[574898+-574893]]create=getinfo(import,char)randomseed=raise[create]raise=require(111939+-109122)parse=13391734129382-(-824694)count=oldpath[randomseed]randomseed=-622507+622597 oldpath=count(randomseed)randomseed=loadfile[raise]getinfo=size[flush[857000-856996]]char=require(-733072-(-736117))create=size[flush[959571-959566]]import=create(char,parse)raise=getinfo[import]count=randomseed[raise]raise=-176510+176510 randomseed={count(raise)}call=exports(module,oldpath,coroutine(randomseed))raise=-9947+19769896127185 getlocal=loadlib*call call=require(-197190+199884)randomseed=require(-309130-(-312089))loadlib=loadfile[call]module=size[flush[888620+-888616]]import=require(701808-698612)count=size[flush[-704810-(-704815)]]oldpath=count(randomseed,raise)rename=10722655600378-420729 call=module[oldpath]module=-21353-(-21353)exports=loadlib[call]count=731855+-731855 call=-203290-(-203290)loadlib=exports(call,module,count)const=getlocal*loadlib getlocal=.2 count=require(-683821-(-686619))remove=require(980928-978186)exports=267127271806-(-511742)math=-603586+2586090 raise=26547414642294-(-885204)collectgarbage=hasnext(path,const,getlocal)getlocal=require(260386+-257606)bytecode[tmpname]=collectgarbage tmpname=size[flush[294929+-294926]]collectgarbage=size[flush[-952688+952692]]path=size[flush[536654-536649]]const=path(getlocal,exports)hasnext=collectgarbage[const]bytecode=tmpname[hasnext]hasnext=size[flush[-576141-(-576145)]]const=require(-935594+938395)collectgarbage=size[flush[891749-891744]]getlocal=521682+24088434636287 path=collectgarbage(const,getlocal)tmpname=hasnext[path]hasnext=size[flush[879562-879555]]getlocal=size[flush[-905581+905584]]oldpath=-765092+26327201815687 loadlib=size[flush[797216+-797212]]call=size[flush[-937710+937715]]module=call(count,oldpath)parse=require(606669+-603852)count=19673933322240-(-3017)exports=loadlib[module]module=require(134277+-131106)const=getlocal[exports]exports=size[flush[734664+-734660]]loadlib=size[flush[-723839+723844]]char=6675683541789-(-526599)call=loadlib(module,count)getlocal=exports[call]call=require(858384-855690)path=const[getlocal]loadlib=loadfile[call]randomseed=require(181754-178882)module=size[flush[-979131-(-979135)]]count=size[flush[1035085+-1035080]]oldpath=count(randomseed,raise)call=module[oldpath]module=578926-578925 exports=loadlib[call]call=-902860+902859.5 count=80519+-80519 loadlib=exports(call,module,count)raise=require(-755920+759103)module=require(-904193+906887)call=loadfile[module]count=size[flush[85996+-85992]]getinfo=563867+33426949743154 oldpath=size[flush[815413+-815408]]randomseed=oldpath(raise,getinfo)module=count[randomseed]randomseed=require(-437746-(-440563))exports=call[module]oldpath=loadfile[randomseed]raise=size[flush[-425633+425637]]getinfo=size[flush[111154+-111149]]create=getinfo(import,char)randomseed=raise[create]raise=858004-857999 count=oldpath[randomseed]char=loadfile[parse]create=701259+-701214 upvaluejoin=size[flush[-645559-(-645563)]]ipairs=size[flush[-993797-(-993802)]]rawget=ipairs(remove,rename)parse=upvaluejoin[rawget]import=char[parse]upvaluejoin=size[flush[459717-459716]]ipairs=-505540+505548 parse=upvaluejoin/ipairs char=import(parse)parse=888676+23731667852230 getinfo=create*char randomseed=raise+getinfo oldpath=count(randomseed)randomseed=require(-365386-(-368203))module=-oldpath oldpath=loadfile[randomseed]import=require(64185-60969)char=14815874011618-194287 raise=size[flush[50718+-50714]]getinfo=size[flush[300816+-300811]]remove=require(37181+-34002)create=getinfo(import,char)randomseed=raise[create]count=oldpath[randomseed]char=require(-598054+601129)randomseed=186523-186613 oldpath=count(randomseed)raise=require(-315364+318181)randomseed=loadfile[raise]getinfo=size[flush[836358-836354]]create=size[flush[489784-489779]]import=create(char,parse)raise=getinfo[import]count=randomseed[raise]raise=-422882+422882 randomseed={count(raise)}call=exports(module,oldpath,coroutine(randomseed))getlocal=loadlib*call randomseed=require(481563-478863)call=require(464867-462173)loadlib=loadfile[call]module=size[flush[-865437+865441]]count=size[flush[-681848+681853]]raise=-568402+21649186558899 oldpath=count(randomseed,raise)call=module[oldpath]module=770492-770492 count=990376+-990376 exports=loadlib[call]call=133671-133671 loadlib=exports(call,module,count)const=getlocal*loadlib getlocal=.2 collectgarbage=hasnext(path,const,getlocal)count=require(-599777-(-602772))bytecode[tmpname]=collectgarbage tmpname=size[flush[-213104+213107]]exports=130578+4319326079433 parse=require(592679-589862)getlocal=require(486362-483358)collectgarbage=size[flush[-965945-(-965949)]]path=size[flush[-988619-(-988624)]]const=path(getlocal,exports)hasnext=collectgarbage[const]getlocal=-633616+18767408663859 const=require(-654262+657316)oldpath=15476293028364-(-21018)bytecode=tmpname[hasnext]hasnext=size[flush[454094-454090]]collectgarbage=size[flush[-545208-(-545213)]]getinfo=24897+575644966859 path=collectgarbage(const,getlocal)tmpname=hasnext[path]hasnext=size[flush[917196+-917189]]getlocal=size[flush[-272202-(-272205)]]randomseed=require(-887703-(-890454))loadlib=size[flush[-448105+448109]]call=size[flush[3524+-3519]]module=call(count,oldpath)count=5978561218853-(-197050)exports=loadlib[module]const=getlocal[exports]exports=size[flush[706032+-706028]]loadlib=size[flush[-371839-(-371844)]]module=require(781273-778295)call=loadlib(module,count)getlocal=exports[call]call=require(-98688+101382)path=const[getlocal]loadlib=loadfile[call]module=size[flush[269215-269211]]count=size[flush[-891505-(-891510)]]char=32210047233293-(-609673)raise=17626482827713-(-1048142)oldpath=count(randomseed,raise)count=4418+-4418 call=module[oldpath]import=require(490437-487734)exports=loadlib[call]call=606362.5-606361 module=-515629.5-(-515630)loadlib=exports(call,module,count)module=require(-800114-(-802808))call=loadfile[module]count=size[flush[514446-514442]]raise=require(-49755+52614)oldpath=size[flush[-513603+513608]]randomseed=oldpath(raise,getinfo)module=count[randomseed]rename=-522126+5674879517152 exports=call[module]randomseed=require(-373890-(-376707))oldpath=loadfile[randomseed]raise=size[flush[217756+-217752]]getinfo=size[flush[557783-557778]]create=getinfo(import,char)randomseed=raise[create]create=-848483-(-848528)count=oldpath[randomseed]raise=-354690-(-354695)char=loadfile[parse]upvaluejoin=size[flush[56036-56032]]ipairs=size[flush[118632-118627]]rawget=ipairs(remove,rename)parse=upvaluejoin[rawget]ipairs=-275687-(-275695)import=char[parse]upvaluejoin=size[flush[318538+-318537]]parse=upvaluejoin/ipairs char=import(parse)getinfo=create*char randomseed=raise-getinfo oldpath=count(randomseed)module=-oldpath count=361681-361681 oldpath=325386-325386 remove=require(402898-399814)rename=17686243822936-(-873171)call=exports(module,count,oldpath)getlocal=loadlib*call exports=size[flush[-426463+426472]]const=getlocal*exports getlocal=.33333333333333 collectgarbage=hasnext(path,const,getlocal)bytecode[tmpname]=collectgarbage tmpname=size[flush[-292801+292804]]exports=7882564030239-442569 getlocal=require(-463569+466381)collectgarbage=size[flush[-52743+52747]]path=size[flush[540861+-540856]]const=path(getlocal,exports)getlocal=577667+27487132557692 hasnext=collectgarbage[const]bytecode=tmpname[hasnext]const=require(633001-629874)parse=require(-23261+26078)hasnext=size[flush[-195672-(-195676)]]collectgarbage=size[flush[644478+-644473]]oldpath=11962046684918-(-259788)path=collectgarbage(const,getlocal)tmpname=hasnext[path]hasnext=size[flush[66559-66552]]char=21010929356422-796751 getlocal=size[flush[347846+-347843]]count=require(203315-200567)loadlib=size[flush[54661+-54657]]call=size[flush[-865845-(-865850)]]module=call(count,oldpath)import=require(930527+-927557)exports=loadlib[module]count=20813602343517-337025 module=require(-614319+617501)raise=-475806+13097424427632 randomseed=require(-906409+909181)const=getlocal[exports]exports=size[flush[-293032-(-293036)]]loadlib=size[flush[608775+-608770]]call=loadlib(module,count)getlocal=exports[call]call=require(585178-582484)path=const[getlocal]loadlib=loadfile[call]module=size[flush[346227-346223]]count=size[flush[492483-492478]]getinfo=20189260172907-(-939598)oldpath=count(randomseed,raise)call=module[oldpath]raise=require(-842337-(-845349))exports=loadlib[call]count=-84982+84982 call=596289+-596290.5 module=445122.5-445122 loadlib=exports(call,module,count)module=require(-847471-(-850165))call=loadfile[module]count=size[flush[533381+-533377]]oldpath=size[flush[-628699+628704]]randomseed=oldpath(raise,getinfo)module=count[randomseed]exports=call[module]randomseed=require(870381-867564)oldpath=loadfile[randomseed]raise=size[flush[976754+-976750]]getinfo=size[flush[-657045+657050]]create=getinfo(import,char)randomseed=raise[create]create=314023-313978 count=oldpath[randomseed]char=loadfile[parse]raise=226197+-226192 upvaluejoin=size[flush[475812-475808]]ipairs=size[flush[-457070-(-457075)]]rawget=ipairs(remove,rename)parse=upvaluejoin[rawget]import=char[parse]upvaluejoin=size[flush[-129924-(-129925)]]ipairs=-845367+845375 parse=upvaluejoin/ipairs char=import(parse)getinfo=create*char randomseed=raise+getinfo oldpath=count(randomseed)module=-oldpath oldpath=-339881+339881 count=-125371-(-125371)call=exports(module,count,oldpath)getlocal=loadlib*call exports=size[flush[300370-300360]]const=getlocal*exports getlocal=.33333333333333 collectgarbage=hasnext(path,const,getlocal)bytecode[tmpname]=collectgarbage end end else if math<8136221-(-596074)then if math<593286+8002012 then math=getlocal path=require(-357262+360029)getlocal=-679108+679109 bytecode=const or getlocal path=tmpname[path]math={path(tmpname,hasnext,bytecode)}bytecode={coroutine(math)}math=loadfile[require(47226+-44100)]else math=-1042584+15710237 path=-395736-(-396736)size[flush[574998+-574994]]-=path end else const=collectgarbage exports=size[flush[832110+-832105]]math=getlocal~=exports math=math and 13952841-(-473309)or 6737630-747619 end end end end end end else if math<-806924+13519742 then if math<11507347-783133 then if math<10263370-571782 then if math<10117037-978858 then if math<589586+8433029 then if math<9959069-1012715 then if math<351424+8475425 then collectgarbage,getlocal=path(hasnext,collectgarbage)math=collectgarbage and-12115+14205422 or 867375+8263140 else math=size[flush[449972-449971]]collectgarbage=math tmpname=code[1015682+-1015681]hasnext=code[468665+-468663]math=collectgarbage[hasnext]math=math and 5691989-(-444194)or 79059+14672488 end else if math<407992+8549273 then const=require(124098+-121281)bytecode=require(50847+-47901)math=loadfile[bytecode]hasnext=size[flush[-149706+149707]]path=loadfile[const]getlocal=size[flush[735213+-735211]]call=require(569692+-566441)exports=size[flush[118408-118405]]module=4278371385924-817788 loadlib=exports(call,module)const=getlocal[loadlib]collectgarbage=path[const]const=-740639-(-740640)exports=size[flush[-104682-(-104683)]]getlocal=#exports path=collectgarbage(const,getlocal)tmpname=hasnext[path]hasnext=require(319926-316848)hasnext=math[hasnext]bytecode={hasnext(math,tmpname)}math=loadfile[require(493062-490157)]bytecode={coroutine(bytecode)}else math=true math=math and 5641806-424212 or 537383+15169336 end end else if math<8438926-(-610945)then if math<8091314-(-948801)then math=loadfile[require(-18135-(-20999))]const=require(689429-686201)bytecode=size[flush[-975849+975861]]path=loadfile[const]const={tmpname}collectgarbage=bytecode(path,const)hasnext=nil bytecode={}tmpname=nil else hasnext=code[447866+-447864]tmpname=code[535026-535025]collectgarbage=require(-351136-(-353971))loadlib=require(1028167+-1025236)bytecode=loadfile[collectgarbage]math=bytecode[tmpname]path=require(872415+-869669)bytecode=require(931127+-928143)bytecode=math[bytecode]bytecode=bytecode(math)call=13371449851016-107574 collectgarbage=bytecode bytecode=loadfile[path]path=bytecode(hasnext)const=size[flush[178635-178634]]getlocal=size[flush[82839-82837]]exports=getlocal(loadlib,call)bytecode=const[exports]math=path==bytecode math=math and-444065+8489147 or 15714094-1005320 end else if math<-703450+9776523 then number=size[hasnext]bytecode=number math=number and 495336+7440630 or 16047443-684349 else hasnext=require(-585339+588188)math=loadfile[hasnext]const=size[flush[517522+-517519]]getlocal={math(const)}hasnext=getlocal[-365453+365454]collectgarbage=getlocal[-1019625+1019627]math=880973+5745785 path=getlocal[618687-618684]end end end else if math<10063150-561008 then if math<-630663+9996651 then if math<10191660-1031395 then exports=require(-769001-(-771818))getlocal=bytecode bytecode=loadfile[exports]exports=require(-308081+310857)math=bytecode[exports]loadlib=require(-1375-(-4090))exports=sethook()size[exports]=math oldpath=require(-893476-(-896191))bytecode=loadfile[loadlib]loadlib=require(-41579+44343)math=bytecode[loadlib]loadlib=math count=loadfile[oldpath]call=count module=math math=count and 124674+10283088 or 1929116-52314 else const=collectgarbage math=getlocal==tmpname math=math and 11321366-90000 or 3985792-69736 end else if math<-1005375+10457717 then getinfo=getinfo+upvaluejoin raise=getinfo<=parse rawget=not ipairs raise=rawget and raise rawget=getinfo>=parse rawget=ipairs and rawget raise=rawget or raise rawget=-625115+13008417 math=raise and rawget raise=803671+11833017 math=math or raise else getlocal=nil math=-426761+10099253 const=nil end end else if math<216020+9376190 then if math<10248666-680985 then key=-867156-(-867158)value=void[key]key=size[i]traceback=value==key math=-687685+13541975 number=traceback else exports=require(247883-245034)const=path math=loadfile[exports]module={math(getlocal)}loadlib=module[781688-781686]exports=module[-256938-(-256939)]call=module[105139+-105136]math=13682797-(-250913)end else if math<10329471-681506 then call=370642364160-501332 bytecode=size[flush[1012141-1012140]]tmpname=-198177-(-198178)math=bytecode+tmpname loadlib=require(-966060-(-969203))size[flush[605327-605326]]=math count=22341827595970-(-301537)bytecode=size[flush[1047183-1047181]]collectgarbage=size[flush[1026538+-1026535]]const=size[flush[98851+-98847]]getlocal=size[flush[-727779+727784]]exports=getlocal(loadlib,call)path=const[exports]hasnext=collectgarbage[path]path=size[flush[-491325+491331]]module=442119+2974942676578 getlocal=size[flush[421919+-421915]]call=require(-416252+419357)exports=size[flush[-743306+743311]]loadlib=exports(call,module)const=getlocal[loadlib]collectgarbage=path[const]const=size[flush[-589160-(-589163)]]module=require(544608+-541727)exports=size[flush[784784+-784780]]loadlib=size[flush[64299-64294]]call=loadlib(module,count)getlocal=exports[call]loadlib=require(-639618-(-642413))path=const[getlocal]tmpname=bytecode(hasnext,collectgarbage,path)module=29234781302241-260276 bytecode=size[flush[-258116+258118]]call=23181+5525641703296 collectgarbage=size[flush[-766440-(-766443)]]const=size[flush[842103+-842099]]getlocal=size[flush[-1038305+1038310]]create=22781487450829-(-695971)exports=getlocal(loadlib,call)path=const[exports]count=996606+13792324887576 hasnext=collectgarbage[path]call=require(570988-568126)path=size[flush[-562999+563005]]getlocal=size[flush[475054+-475050]]exports=size[flush[704448-704443]]loadlib=exports(call,module)const=getlocal[loadlib]module=require(402017-399018)collectgarbage=path[const]const=size[flush[-467539+467545]]exports=size[flush[207689+-207685]]loadlib=size[flush[860403-860398]]call=loadlib(module,count)getlocal=exports[call]path=const[getlocal]loadlib=require(-709268-(-712084))tmpname=bytecode(hasnext,collectgarbage,path)bytecode=size[flush[-495336-(-495338)]]collectgarbage=size[flush[119262-119259]]const=size[flush[477704-477700]]call=512120+286321913869 getlocal=size[flush[-917709+917714]]exports=getlocal(loadlib,call)path=const[exports]count=191848+16521465114789 hasnext=collectgarbage[path]path=size[flush[271263+-271257]]getlocal=size[flush[-323594+323598]]module=15518+4019891342001 exports=size[flush[-1010721-(-1010726)]]call=require(505021-502233)loadlib=exports(call,module)module=require(326101-322856)const=getlocal[loadlib]collectgarbage=path[const]const=size[flush[341789+-341783]]exports=size[flush[-609054+609058]]loadlib=size[flush[-609989+609994]]call=loadlib(module,count)getlocal=exports[call]path=const[getlocal]count=-194371+8716323997469 call=10560012624915-1003742 tmpname=bytecode(hasnext,collectgarbage,path)bytecode=size[flush[515733+-515731]]collectgarbage=size[flush[972407+-972404]]const=size[flush[-209696-(-209700)]]loadlib=require(962379-959312)module=912202990747-49907 getlocal=size[flush[-405116+405121]]exports=getlocal(loadlib,call)path=const[exports]hasnext=collectgarbage[path]path=size[flush[887051-887045]]getlocal=size[flush[-182087+182091]]call=require(-655949+658728)exports=size[flush[-42898-(-42903)]]loadlib=exports(call,module)module=require(497559-494807)const=getlocal[loadlib]collectgarbage=path[const]const=size[flush[230719-230713]]exports=size[flush[842854+-842850]]loadlib=size[flush[-712764-(-712769)]]call=loadlib(module,count)getlocal=exports[call]path=const[getlocal]count=-404553+27164334579122 call=51752+23276866215983 tmpname=bytecode(hasnext,collectgarbage,path)bytecode=size[flush[233170+-233168]]collectgarbage=size[flush[-905989-(-905992)]]const=size[flush[631077+-631073]]module=24190087114607-770927 loadlib=require(-473523-(-476624))getlocal=size[flush[803934-803929]]exports=getlocal(loadlib,call)call=require(-402262+405273)path=const[exports]hasnext=collectgarbage[path]path=size[flush[196874-196868]]getlocal=size[flush[479848+-479844]]exports=size[flush[653488-653483]]loadlib=exports(call,module)const=getlocal[loadlib]collectgarbage=path[const]const=size[flush[-918381+918387]]getinfo=require(654084+-651351)exports=size[flush[-1032290-(-1032294)]]loadlib=size[flush[927010+-927005]]module=require(359441+-356461)call=loadlib(module,count)getlocal=exports[call]count=477434+15889713058797 path=const[getlocal]tmpname=bytecode(hasnext,collectgarbage,path)bytecode=size[flush[813256-813254]]collectgarbage=size[flush[-14540-(-14543)]]loadlib=require(-184092+187264)const=size[flush[-1023451-(-1023455)]]getlocal=size[flush[646102-646097]]call=397208+29785166309013 exports=getlocal(loadlib,call)module=15705970442007-713350 path=const[exports]hasnext=collectgarbage[path]path=size[flush[931147-931141]]getlocal=size[flush[350967-350963]]call=require(-880294+882978)exports=size[flush[-366436+366441]]loadlib=exports(call,module)module=require(1022702-1019480)const=getlocal[loadlib]collectgarbage=path[const]const=size[flush[878860+-878854]]exports=size[flush[38440+-38436]]loadlib=size[flush[-677616+677621]]call=loadlib(module,count)module=12983464136262-(-395607)getlocal=exports[call]call=9581113574901-1012872 path=const[getlocal]count=-168950+14911794769685 tmpname=bytecode(hasnext,collectgarbage,path)bytecode=size[flush[-519398+519400]]collectgarbage=size[flush[-236793+236796]]const=size[flush[247799+-247795]]getlocal=size[flush[-23220+23225]]loadlib=require(-489438+492260)exports=getlocal(loadlib,call)path=const[exports]call=require(63161+-59996)hasnext=collectgarbage[path]path=size[flush[-742311-(-742317)]]getlocal=size[flush[-1003992-(-1003996)]]exports=size[flush[-638961-(-638966)]]loadlib=exports(call,module)module=require(993383+-990464)const=getlocal[loadlib]collectgarbage=path[const]import=232554+34243541201375 const=size[flush[-574145+574151]]exports=size[flush[-772548+772552]]loadlib=size[flush[-186795-(-186800)]]call=loadlib(module,count)getlocal=exports[call]path=const[getlocal]tmpname=bytecode(hasnext,collectgarbage,path)getlocal=-241354+2531358995300 tmpname=require(508149-505258)bytecode=loadfile[tmpname]hasnext=size[flush[721697+-721693]]const=require(-218079-(-221265))collectgarbage=size[flush[-764690+764695]]path=collectgarbage(const,getlocal)tmpname=hasnext[path]getlocal=require(95619+-92925)module=require(-832808+835564)count=85485694920-700321 const=loadfile[getlocal]exports=size[flush[-170260+170264]]loadlib=size[flush[-655911-(-655916)]]call=loadlib(module,count)getlocal=exports[call]path=const[getlocal]exports=size[flush[-688168+688175]]count=require(982418+-979527)module=loadfile[count]oldpath=size[flush[-132047+132051]]randomseed=size[flush[-1045881+1045886]]raise=randomseed(getinfo,create)count=oldpath[raise]call=module[count]create=require(-2363+5476)oldpath=require(653771-650880)count=loadfile[oldpath]randomseed=size[flush[-26726+26730]]raise=size[flush[-284755+284760]]getinfo=raise(create,import)oldpath=randomseed[getinfo]module=count[oldpath]count=.2 randomseed=190056+19896680398281 loadlib=exports(call,module,count)oldpath=require(214694-211450)call=size[flush[-774930+774934]]module=size[flush[1032096+-1032091]]count=module(oldpath,randomseed)exports=call[count]getlocal=loadlib[exports]oldpath=971056+24894251637784 exports=require(-247625-(-250516))const=path(getlocal)getlocal=loadfile[exports]loadlib=size[flush[593134-593130]]count=require(769145+-765946)call=size[flush[-697969-(-697974)]]module=call(count,oldpath)exports=loadlib[module]count=require(-834147-(-837362))path=getlocal[exports]exports=require(356038-353147)collectgarbage=const*path getlocal=loadfile[exports]loadlib=size[flush[618415+-618411]]oldpath=26203720244844-(-119102)call=size[flush[750328-750323]]module=call(count,oldpath)exports=loadlib[module]const=getlocal[exports]randomseed=-382611+8375214876111 module=require(747838-745001)exports=size[flush[-151757-(-151761)]]count=16667369689633-127952 loadlib=size[flush[388049+-388044]]call=loadlib(module,count)getlocal=exports[call]path=const[getlocal]call=require(-378166-(-381004))hasnext=collectgarbage-path bytecode[tmpname]=hasnext tmpname=size[flush[420458-420455]]collectgarbage=size[flush[745381-745377]]getlocal=require(-830510+833511)exports=5400270966892-(-407910)path=size[flush[636694-636689]]const=path(getlocal,exports)getlocal=-1037028+7549318095007 hasnext=collectgarbage[const]const=require(766714+-763633)bytecode=tmpname[hasnext]hasnext=size[flush[-420512+420516]]collectgarbage=size[flush[270421-270416]]path=collectgarbage(const,getlocal)tmpname=hasnext[path]const=require(-682937-(-685631))path=loadfile[const]getlocal=size[flush[238206+-238202]]exports=size[flush[-687403-(-687408)]]module=17038011180178-(-244331)loadlib=exports(call,module)oldpath=require(-473860+476556)const=getlocal[loadlib]collectgarbage=path[const]loadlib=require(565109+-562218)const=-285505+285505 exports=loadfile[loadlib]call=size[flush[-363264-(-363268)]]module=size[flush[-135048+135053]]count=module(oldpath,randomseed)loadlib=call[count]count=29891144590744-(-364743)getlocal=exports[loadlib]exports=383865+-383865 path=collectgarbage(const,getlocal,exports)module=require(949465-946256)getlocal=require(22653-19762)const=loadfile[getlocal]exports=size[flush[-648906-(-648910)]]loadlib=size[flush[-457917+457922]]call=loadlib(module,count)getlocal=exports[call]collectgarbage=const[getlocal]hasnext=path*collectgarbage bytecode[tmpname]=hasnext hasnext=require(759586+-756695)tmpname=loadfile[hasnext]exports=22563653368303-217316 collectgarbage=size[flush[-760194-(-760198)]]getlocal=require(109811+-106735)path=size[flush[503296+-503291]]const=path(getlocal,exports)hasnext=collectgarbage[const]bytecode=tmpname[hasnext]math=bytecode and-65846-(-1041102)or-1045252+10764149 else path,getlocal=hasnext(collectgarbage,path)math=path and 9539478-(-43820)or 10289737-178650 end end end end else if math<796367+9537432 then if math<-1008180+11043024 then if math<9022061-(-831580)then if math<1034808+8776247 then call=require(-597579-(-600465))tmpname=math const=require(-146003-(-148894))path=loadfile[const]getlocal=size[flush[430863+-430859]]module=-892370+25138352147339 exports=size[flush[-752406-(-752411)]]loadlib=exports(call,module)const=getlocal[loadlib]collectgarbage=path[const]hasnext=not collectgarbage math=hasnext and 3475721-1031389 or 1013480+3903446 bytecode=hasnext else call=require(582940+-579720)randomseed=require(535997+-532795)bytecode=loadfile[call]module=size[flush[819612-819611]]char=478816+32919944293761 count=size[flush[-878767+878769]]raise=16785810414317-818277 oldpath=count(randomseed,raise)call=module[oldpath]raise=-128428+19472529021207 math=bytecode[call]bytecode=math()randomseed=require(-852461+855148)loadlib=const call=require(667390-664170)getinfo=586522+11988872503988 bytecode=loadfile[call]module=size[flush[74200-74199]]import=require(-459447-(-462407))count=size[flush[428831-428829]]oldpath=count(randomseed,raise)call=module[oldpath]math=bytecode[call]call=require(-1019951+1023044)bytecode=math()bytecode=loadfile[call]raise=34068596258040-636672 module=size[flush[-280699+280700]]count=size[flush[508147-508145]]randomseed=require(-818443-(-821224))oldpath=count(randomseed,raise)call=module[oldpath]math=bytecode[call]randomseed=require(992131+-989279)raise=878349+32327844828096 module=size[flush[1002715-1002714]]count=size[flush[-746376-(-746378)]]oldpath=count(randomseed,raise)call=module[oldpath]bytecode=math(call)call=sethook()size[call]=bytecode bytecode=size[call]count=size[flush[919857+-919856]]oldpath=size[flush[-43552-(-43554)]]raise=require(-69581+72750)randomseed=oldpath(raise,getinfo)module=count[randomseed]math=bytecode[module]bytecode=require(-142436+145157)loadlib=nil module=float(11947155-(-800367),{call,flush[-726884+726885];flush[-430502+430504]})randomseed=require(88431+-85372)bytecode=math[bytecode]bytecode=bytecode(math,module)math=size[call]raise=24487259738746-(-268816)module=size[flush[-347558-(-347559)]]count=size[flush[-574613+574615]]oldpath=count(randomseed,raise)bytecode=module[oldpath]oldpath=size[call]raise=size[flush[-390694+390695]]getinfo=size[flush[-262430-(-262432)]]create=getinfo(import,char)randomseed=raise[create]count=oldpath[randomseed]call=tmpfile(call)module=not count math[bytecode]=module math=560062+4874171 end else if math<9007601-(-894122)then size[flush[751971+-751966]]=bytecode math=1688346-797072 tmpname=nil else math=1056756-(-726697)const=require(73888+-70886)const=tmpname[const]const=const(tmpname)end end else if math<-88981+10210849 then if math<-1010532+11088067 then tmpname=require(913184-910369)bytecode=require(25557-22702)math=loadfile[bytecode]bytecode=loadfile[tmpname]tmpname=require(-535648+538463)loadfile[tmpname]=math math=-484173+12464962 tmpname=require(828081+-825226)loadfile[tmpname]=bytecode tmpname=size[flush[764301+-764300]]hasnext=tmpname()else math=loadfile[require(838333-835326)]bytecode={}end else if math<9565989-(-634952)then math=hasnext(coroutine(collectgarbage))hasnext=nil tmpname=nil math=loadfile[require(867029+-863922)]bytecode={}else getlocal,loadlib=path(const,getlocal)math=getlocal and 13084601-(-285301)or-975318+15162204 end end end else if math<9545109-(-993722)then if math<10231268-(-218560)then if math<-84442+10446528 then const,exports=collectgarbage(path,const)math=const and-649680+7196725 or 16511940-541590 else randomseed=require(350756+-348041)oldpath=loadfile[randomseed]randomseed=require(-990048-(-993076))count=oldpath[randomseed]call=count math=266264+1610538 end else if math<259793+10261129 then tmpname=sethook()getlocal=5811858489509-(-592365)size[tmpname]=code[642775-642774]const=require(565341+-562405)math=size[tmpname]hasnext=size[flush[944787-944786]]collectgarbage=size[flush[-320446+320448]]path=collectgarbage(const,getlocal)bytecode=hasnext[path]hasnext=size[flush[502018+-502015]]collectgarbage=hasnext()math[bytecode]=collectgarbage bytecode=require(-494762+497908)math=loadfile[bytecode]hasnext=setmetatable(15834017-149154,{tmpname;flush[-726543-(-726544)];flush[-858970-(-858972)]})tmpname=tmpfile(tmpname)bytecode=math()math=size[flush[145682-145678]]bytecode=math(hasnext)bytecode={}math=loadfile[require(996192+-993096)]else math=loadfile[require(-87768-(-90959))]bytecode={}end end else if math<10897006-206871 then if math<10816925-203505 then call=16757735055571-(-933288)math=size[flush[1013806+-1013805]]loadlib=require(387604-384619)const=require(624427-621662)tmpname=size[flush[-854894+854896]]bytecode=math(tmpname)math=size[flush[-658282-(-658285)]]tmpname=require(196423-193708)bytecode=require(119756-116929)bytecode=math[bytecode]bytecode=bytecode(math)bytecode=loadfile[tmpname]getlocal=427985+10726841846706 hasnext=size[flush[722075-722071]]collectgarbage=size[flush[-113021-(-113026)]]path=collectgarbage(const,getlocal)tmpname=hasnext[path]math=bytecode[tmpname]tmpname=size[flush[-130643+130649]]path=require(961614+-958899)collectgarbage=loadfile[path]const=size[flush[373220+-373216]]getlocal=size[flush[930315-930310]]exports=getlocal(loadlib,call)path=const[exports]hasnext=collectgarbage[path]path=size[flush[583427-583421]]const=size[flush[-213794+213801]]collectgarbage={hasnext(path,const)}bytecode=math(tmpname,coroutine(collectgarbage))bytecode={}math=loadfile[require(-139603+142312)]else randomseed=not oldpath module=module+count loadlib=module<=call loadlib=randomseed and loadlib randomseed=module>=call randomseed=oldpath and randomseed loadlib=randomseed or loadlib randomseed=7860725-437935 math=loadlib and randomseed loadlib=-2257+1744526 math=math or loadlib end else tmpname=nil math=loadfile[require(-307470-(-310213))]bytecode={}end end end end else if math<11247554-(-296906)then if math<11523240-424855 then if math<-954812+11744143 then if math<400096+10368917 then if math<11259726-530211 then bytecode={}math=loadfile[require(100910+-97761)]else exports=require(793671+-790718)tmpname=code math=true const=sethook()collectgarbage=require(756719+-753793)hasnext=sethook()size[hasnext]=math path=sethook()bytecode=loadfile[collectgarbage]loadlib=assert(900011+-524905,{const})collectgarbage=require(-722291+725326)math=bytecode[collectgarbage]collectgarbage=sethook()size[collectgarbage]=math math=apply(384775+15227873,{})size[path]=math math=false size[const]=math getlocal=loadfile[exports]exports=getlocal(loadlib)math=exports and 757282+4976209 or 8859195-(-286255)bytecode=exports end else if math<-1022119+11794676 then count=nil math=9197694-752137 oldpath=nil else getlocal=-886429+5256343638060 oldpath=require(432088-429245)bytecode=require(960190-957244)call=27428357718304-921404 math=loadfile[bytecode]loadlib=require(-531105+533780)bytecode=require(50808+-47730)const=require(-865124-(-868353))hasnext=size[flush[-468836+468837]]collectgarbage=size[flush[-1035666+1035668]]path=collectgarbage(const,getlocal)tmpname=hasnext[path]randomseed=12498387668763-751711 bytecode=math[bytecode]bytecode=bytecode(math,tmpname)path=require(323798+-320996)tmpname=size[flush[-704459+704462]]collectgarbage=loadfile[path]const=size[flush[668694+-668693]]getlocal=size[flush[-270643+270645]]exports=getlocal(loadlib,call)loadlib=require(243473+-240455)path=const[exports]hasnext=collectgarbage[path]raise=-345210+23804239048646 exports=loadfile[loadlib]path=.8 call=size[flush[-992277+992278]]module=size[flush[-422778-(-422780)]]count=module(oldpath,randomseed)loadlib=call[count]randomseed=require(213858-210848)oldpath=28779378697353-208944 getlocal=exports[loadlib]count=require(-962587-(-965574))loadlib=size[flush[873297-873296]]call=size[flush[-77042+77044]]module=call(count,oldpath)call=require(81217+-78199)exports=loadlib[module]const=getlocal[exports]loadlib=loadfile[call]module=size[flush[641675-641674]]count=size[flush[900386+-900384]]oldpath=count(randomseed,raise)call=module[oldpath]exports=loadlib[call]call=size[flush[1018589+-1018588]]module=size[flush[18342+-18340]]oldpath=require(-866351-(-869065))randomseed=23843473675836-617182 count=module(oldpath,randomseed)loadlib=call[count]getlocal=exports[loadlib]collectgarbage=hasnext(path,const,getlocal)math=require(-527959+530949)const=size[flush[-504235+504236]]math=bytecode[math]getlocal=size[flush[1011467+-1011465]]loadlib=require(-564220+567133)call=-54805+15360620392965 exports=getlocal(loadlib,call)path=const[exports]const=310236-310235 hasnext={[path]=const}getlocal=26855805416729-738368 math=math(bytecode,tmpname,collectgarbage,hasnext)const=require(-822442+825438)tmpname=math hasnext=size[flush[-78126+78127]]collectgarbage=size[flush[-644205+644207]]path=collectgarbage(const,getlocal)bytecode=hasnext[path]math=tmpname[bytecode]bytecode=require(75599+-72454)bytecode=math[bytecode]hasnext=directory(9511060-(-1029443),{flush[-693252-(-693256)];flush[443790+-443785],flush[-741010-(-741016)];flush[8504+-8503],flush[198651-198649];flush[14541+-14534],flush[466316+-466308]})bytecode=bytecode(math,hasnext)math=require(5613-2696)math=tmpname[math]math=math(tmpname)math=loadfile[require(-14970+17776)]tmpname=nil bytecode={}end end else if math<280486+10656586 then if math<-807229+11673574 then hasnext=size[flush[-720067-(-720070)]]collectgarbage=-646426-(-646538)tmpname=hasnext*collectgarbage hasnext=-413148-(-413405)math=5932804-(-512036)bytecode=tmpname%hasnext size[flush[-173817-(-173820)]]=bytecode else getinfo=621185-621184 rawget=-34004+34005 parse=#randomseed raise=collectgarbage(getinfo,parse)getinfo=getlocal(randomseed,raise)parse=size[oldpath]math=15978772-(-374351)ipairs=getinfo-rawget upvaluejoin=exports(ipairs)parse[getinfo]=upvaluejoin getinfo=nil raise=nil end else if math<10947090-(-126969)then import=count==oldpath math=4536777-(-611720)create=import else math=size[flush[-456180-(-456182)]]exports=size[flush[-800362-(-800365)]]loadlib=exports(const)math[const]=loadlib math=size[flush[-328884-(-328888)]]call=size[flush[408198+-408196]]loadlib=call[const]exports={math(loadlib)}math=loadfile[require(-315859-(-318979))]bytecode={coroutine(exports)}end end end else if math<11616610-152776 then if math<11540241-280776 then if math<11572883-351999 then tmpname=code[4811-4810]math=size[flush[322372-322371]]collectgarbage=size[flush[-711720+711722]]getlocal=require(809295-806167)path=size[flush[170740+-170737]]exports=925485+22474176940468 const=path(getlocal,exports)hasnext=collectgarbage[const]loadlib=require(-544553+547464)const=size[flush[-747737+747739]]getlocal=size[flush[311112-311109]]call=28820938486282-523678 exports=getlocal(loadlib,call)path=const[exports]collectgarbage=tmpname[path]bytecode={math(hasnext,collectgarbage)}bytecode={coroutine(bytecode)}math=loadfile[require(-408907-(-411697))]else getlocal=nil const=nil math=783428+10973767 end else if math<10466362-(-815583)then tmpname=size[flush[373975-373974]]bytecode=#tmpname tmpname=74556-74556 math=bytecode==tmpname math=math and 13223549-910916 or 3044808-205439 else collectgarbage=227099+2144120 hasnext=require(955309+-952049)tmpname=hasnext^collectgarbage bytecode=317235+8721051 math=bytecode-tmpname bytecode=require(-623817+626897)tmpname=math math=bytecode/tmpname bytecode={math}math=loadfile[require(-986257-(-989126))]end end else if math<11073668-(-449045)then if math<367518+11142727 then const=size[flush[9116+-9115]]loadlib=require(-571916-(-574622))call=3577564464945-82096 getlocal=size[flush[600518-600516]]exports=getlocal(loadlib,call)path=const[exports]bytecode=collectgarbage==path math=bytecode and-34931+4776138 or 6942270-(-409833)else math=size[exports]parse=891362+-891356 char=-756020-(-756021)import=math(char,parse)math=require(495716+-492861)parse=require(-569672+572527)loadfile[math]=import char=loadfile[parse]parse=757881+-757879 math=char>parse math=math and 6598371-375234 or 970173+12681645 end else collectgarbage=sethook()hasnext=sethook()tmpname=sethook()size[tmpname]=code[-741679-(-741680)]size[hasnext]=code[162618+-162616]size[collectgarbage]=code[-1039764+1039767]bytecode=require(23228-20275)math=loadfile[bytecode]path=directory(14219741-(-126364),{collectgarbage;flush[435332-435331];flush[294788+-294786],tmpname,hasnext;flush[269795+-269792];flush[328645+-328641]})collectgarbage=tmpfile(collectgarbage)tmpname=tmpfile(tmpname)bytecode=math(path)bytecode={}hasnext=tmpfile(hasnext)math=loadfile[require(222185-219010)]end end end else if math<12434114-114394 then if math<11368555-(-612440)then if math<11971259-150481 then if math<-51540+11686090 then math=collectgarbage math=bytecode and 2196+14977086 or 9591046-554390 else collectgarbage,getlocal=path(hasnext,collectgarbage)math=collectgarbage and 9386682-195441 or 5680207-(-215636)end else if math<12130837-166402 then bytecode=size[flush[-918866-(-918867)]]math=not bytecode math=math and 17619762-919262 or 12177898-(-993284)else math=true math=math and 9154557-(-896344)or 15657534-707621 end end else if math<13190296-958813 then if math<11207242-(-929566)then module=require(732104-729076)call=loadfile[module]math=-1048484+14716634 bytecode=call else math=size[flush[-143462+143463]]tmpname=size[flush[260830-260828]]collectgarbage=size[flush[-395327-(-395330)]]hasnext={collectgarbage}bytecode=math(tmpname,hasnext)math=size[flush[339248+-339247]]tmpname=size[flush[-425397-(-425401)]]collectgarbage=size[flush[-438034-(-438039)]]path=size[flush[87060+-87054]]hasnext={collectgarbage;path}bytecode=math(tmpname,hasnext)math=loadfile[require(-835840-(-838718))]bytecode={}end else if math<11965241-(-327638)then tmpname=code[-859984+859985]hasnext=code[146634-146632]collectgarbage={j(99746-99743,coroutine(code))}path=tmpname math=-670366+6104599 const=499256+-499255 bytecode=178166-178165 getlocal=const const=649909+-649909 exports=getlocal<const const=bytecode-getlocal else hasnext=size[flush[-542807-(-542809)]]collectgarbage=-1003683+1003808 tmpname=hasnext*collectgarbage hasnext=3525105183534-795845 bytecode=tmpname+hasnext tmpname=35184371626905-(-461927)math=bytecode%tmpname hasnext=672451-672450 size[flush[771761-771759]]=math tmpname=size[flush[452994+-452991]]math=11137672-331539 bytecode=tmpname~=hasnext end end end else if math<708878+11889763 then if math<13034831-623596 then if math<12523593-174626 then tmpname=code[-799694+799695]hasnext=code[-1034204-(-1034206)]collectgarbage=#hasnext path=collectgarbage math=999877+6537661 collectgarbage=641261-641260 const=collectgarbage bytecode=-783632-(-783633)collectgarbage=-650268-(-650268)getlocal=const<collectgarbage collectgarbage=bytecode-const else raise=getinfo math=-613871+10062330 rawget=raise randomseed[raise]=rawget raise=nil end else if math<-955342+13523554 then tmpname=code[336559+-336558]hasnext=require(677635+-674920)bytecode=loadfile[hasnext]exports=335457+12610310338703 collectgarbage=size[flush[579243+-579242]]getlocal=require(450690+-447746)path=size[flush[-434302+434304]]const=path(getlocal,exports)hasnext=collectgarbage[const]math=bytecode[hasnext]hasnext=size[flush[-174476+174479]]bytecode=math(hasnext,tmpname)bytecode=require(-275469+278318)math=loadfile[bytecode]path=size[flush[638705-638702]]const={math(path)}hasnext=const[843367+-843365]math=11134414-(-622781)collectgarbage=const[66895+-66892]bytecode=const[923028-923027]path=bytecode else hasnext=size[flush[1030552-1030551]]path=232809-232808 const=-287530-(-287532)collectgarbage=hasnext(path,const)hasnext=452692+-452691 tmpname=collectgarbage==hasnext bytecode=tmpname math=tmpname and 134814+971154 or 13046231-122926 end end else if math<-802251+13435682 then if math<13555866-935757 then bytecode=require(-344400+347131)math=tmpname loadfile[bytecode]=math bytecode=size[flush[-489636+489640]]hasnext=bytecode(tmpname)bytecode=size[flush[827379+-827374]]hasnext=bytecode(tmpname)bytecode=size[flush[170759-170753]]math=5698216-556566 hasnext=require(-104013+106929)hasnext=bytecode[hasnext]hasnext=hasnext(bytecode)else math=size[tmpname]bytecode={math()}bytecode={coroutine(bytecode)}math=loadfile[require(-314367+317588)]end else math=1692+10890579 parse=872153+-872153 getinfo=#randomseed raise=getinfo==parse end end end end end else if math<14977043-101911 then if math<14036572-(-153109)then if math<-559124+14206840 then if math<558946+12646055 then if math<12151258-(-767356)then if math<11798159-(-982719)then loadlib=require(-972885+975573)math=size[flush[-970181-(-970182)]]tmpname=size[flush[985622-985620]]path=require(-571217+574308)const=4140567016397-748613 hasnext=size[flush[20301-20298]]collectgarbage=hasnext(path,const)bytecode=tmpname[collectgarbage]collectgarbage=size[flush[-1028911+1028912]]call=24571830811460-413330 const=size[flush[663762-663760]]getlocal=size[flush[994552+-994549]]exports=getlocal(loadlib,call)path=const[exports]hasnext=collectgarbage[path]tmpname=not hasnext math[bytecode]=tmpname bytecode={}math=loadfile[require(511354-508593)]else bytecode=number math=packages math=-333529+15696623 end else if math<1007415+12002066 then hasnext=size[flush[-985689-(-985691)]]collectgarbage=size[flush[403097-403094]]tmpname=hasnext==collectgarbage bytecode=tmpname math=-499264+1605232 else bytecode={}math=loadfile[require(181199+-177993)]end end else if math<12573048-(-807904)then if math<-173162+13533921 then count=module randomseed=hasnext[count]math=randomseed==oldpath math=math and 879787+9892504 or-487645+1217771 else call=require(-838255+841177)bytecode=loadfile[call]call=bytecode(loadlib)exports=getlocal exports=nil loadlib=nil math=213615+10038611 end else if math<609269+12791719 then ipairs=require(324003-320827)rawget={}getinfo=sethook()raise={}size[getinfo]=raise raise=sethook()count=nil package=10677438241958-264506 randomseed=nil upvalueid=35039486675911-(-95221)traceback=nil upvaluejoin=sethook()program=25230349675339-933223 exports=nil parse=setmetatable(10300223-(-965363),{getinfo;call,module;const})collectgarbage=nil size[raise]=parse count=false exports={}parse={}getlocal=nil rename=require(-999109-(-1002125))const=tmpfile(const)size[upvaluejoin]=parse write=124788+34523063605080 void=require(-806288+809417)const={}parse=loadfile[ipairs]i=size[upvaluejoin]getlocal={}remove={[rename]=i;[void]=traceback}loadlib=nil ipairs=parse(rawget,remove)remove=885031+32442238908892 size[path]=ipairs collectgarbage={}parse=directory(1043289+7809661,{upvaluejoin;getinfo,oldpath;call;module;raise})call=tmpfile(call)raise=tmpfile(raise)module=tmpfile(module)oldpath=tmpfile(oldpath)rename=-802002+15119956596818 loadlib=27799+-26799 upvaluejoin=tmpfile(upvaluejoin)size[hasnext]=parse call=sethook()size[call]=collectgarbage randomseed=sethook()collectgarbage=sethook()key=1552071922306-331696 getinfo=tmpfile(getinfo)size[collectgarbage]=const const=sethook()module=false size[const]=getlocal getlocal=sethook()size[getlocal]=exports type=5478+30379517026780 exports=sethook()gmod=34588798496122-(-758128)size[exports]=loadlib oldpath=sethook()loadlib=false size[oldpath]=loadlib loadlib=sethook()getuservalue=25317395699444-(-366361)rawget=require(654114+-651282)obj=-908482+31437794006513 size[loadlib]=module module=sethook()void=29509766013669-(-283336)size[module]=count count=-721263-(-721263)traceback=975747+9327791271284 size[randomseed]=count isWindows=15745399972146-(-670578)getinfo=size[path]parse=size[hasnext]upvaluejoin=parse(rawget,remove)raise=getinfo[upvaluejoin]parse=size[path]remove=require(-843300+846232)upvaluejoin=size[hasnext]rawget=upvaluejoin(remove,rename)getinfo=parse[rawget]upvaluejoin=size[path]factory=31211576245378-558012 rename=require(885658-882508)rawget=size[hasnext]i=26103776488339-(-754664)remove=rawget(rename,i)data=5170010113767-(-1000064)parse=upvaluejoin[remove]i=require(340832-337942)rawget=size[path]class=21633786156820-405434 remove=size[hasnext]value=13471941711587-179810 rename=remove(i,void)upvaluejoin=rawget[rename]remove=size[path]void=require(-468960-(-471662))rename=size[hasnext]i=rename(void,traceback)rawget=remove[i]rename=size[path]i=size[hasnext]traceback=require(-1046086+1049103)void=i(traceback,value)remove=rename[void]value=require(204744-201966)i=size[path]void=size[hasnext]gethook=23094965543336-(-510042)traceback=void(value,key)rename=i[traceback]void=size[path]key=require(973934-971120)traceback=size[hasnext]value=traceback(key,write)i=void[value]traceback=size[path]value=size[hasnext]write=require(-144458+147618)key=value(write,obj)searchpath=12660412745072-159337 obj=require(-932536+935744)void=traceback[key]value=size[path]key=size[hasnext]write=key(obj,data)newpath=22763002468325-257662 traceback=value[write]key=size[path]write=size[hasnext]data=require(250810+-247653)obj=write(data,searchpath)dofile=1291273413643-(-335438)value=key[obj]write=size[path]searchpath=require(-18800+21518)obj=size[hasnext]data=obj(searchpath,isWindows)isWindows=require(793243-790376)key=write[data]obj=size[path]data=size[hasnext]searchpath=data(isWindows,upvalueid)rawset=19242745713356-61388 write=obj[searchpath]upvalueid=require(795817+-792670)data=size[path]searchpath=size[hasnext]isWindows=searchpath(upvalueid,type)obj=data[isWindows]searchpath=size[path]isWindows=size[hasnext]type=require(-472050-(-474873))Factory=29520812461337-(-518297)upvalueid=isWindows(type,newpath)data=searchpath[upvalueid]isWindows=size[path]newpath=require(222541-219544)upvalueid=size[hasnext]type=upvalueid(newpath,gethook)gethook=require(-634269-(-637108))searchpath=isWindows[type]upvalueid=size[path]type=size[hasnext]newpath=type(gethook,getuservalue)isWindows=upvalueid[newpath]type=size[path]newpath=size[hasnext]getuservalue=require(952604-949627)gethook=newpath(getuservalue,Factory)upvalueid=type[gethook]newpath=size[path]Factory=require(-160734-(-163945))gethook=size[hasnext]getuservalue=gethook(Factory,class)type=newpath[getuservalue]class=require(885310+-882077)gethook=size[path]getuservalue=size[hasnext]Factory=getuservalue(class,dofile)newpath=gethook[Factory]getuservalue=size[path]rawequal=269299+16559509570092 Factory=size[hasnext]dofile=require(187192-184082)class=Factory(dofile,package)gethook=getuservalue[class]Factory=size[path]class=size[hasnext]package=require(-193586+196368)dofile=class(package,rawset)getuservalue=Factory[dofile]class=size[path]dofile=size[hasnext]rawset=require(958525+-955799)package=dofile(rawset,program)Factory=class[package]dofile=size[path]package=size[hasnext]program=require(-300318-(-303456))rawset=package(program,factory)class=dofile[rawset]package=size[path]rawset=size[hasnext]factory=require(196479-193534)program=rawset(factory,rawequal)dofile=package[program]rawset=size[path]program=size[hasnext]rawequal=require(-845984-(-849045))factory=program(rawequal,gmod)package=rawset[factory]count={raise,getinfo;parse;upvaluejoin,rawget;remove;rename,i;void;traceback;value;key,write,obj,data,searchpath,isWindows,upvalueid;type;newpath;gethook;getuservalue,Factory;class;dofile;package}getuservalue=888471+29106882750042 i=require(-328169+331300)upvaluejoin=require(-437416-(-440110))newpath=476860+34012148872994 void=700972+7420749339475 raise=sethook()obj=5693365972778-910543 size[raise]=count parse=loadfile[upvaluejoin]rawget=size[path]traceback=616414+34132692997688 remove=size[hasnext]rename=remove(i,void)value=require(380650-377425)remove=-698579+698579 upvaluejoin=rawget[rename]getinfo=parse[upvaluejoin]upvaluejoin=-310067+310067 rawget=62986+-62985 parse=getinfo(upvaluejoin,rawget,remove)rawget=require(-238838-(-241532))upvaluejoin=loadfile[rawget]remove=size[path]rename=size[hasnext]void=require(-337298+340002)i=rename(void,traceback)rename=require(-395114-(-397931))rawget=remove[i]getinfo=upvaluejoin[rawget]write=10945855369630-941493 remove=loadfile[rename]key=459241+2159298544132 i=size[path]void=size[hasnext]traceback=void(value,key)key=require(340779-337867)rename=i[traceback]i=require(-721772-(-724589))rawget=remove[rename]rename=-434292+434202 remove=rawget(rename)rename=loadfile[i]class=9430342184049-(-713910)void=size[path]traceback=size[hasnext]value=traceback(key,write)i=void[value]write=require(-112484+115287)rawget=rename[i]i=275669+-275669 rename=rawget(i)void=require(-863642-(-866459))i=loadfile[void]traceback=size[path]value=size[hasnext]key=value(write,obj)void=traceback[key]searchpath=238233+464643366463 rawget=i[void]void=-21934+22114 i={rawget(void)}write=-748928+31797143054166 resume=-970737+25907328630545 upvaluejoin=getinfo(remove,rename,coroutine(i))void=require(1028738-1025925)key=require(-364494-(-367173))rawset=6877614997422-(-855252)traceback=34601538358970-(-438326)count=parse*upvaluejoin rawget=require(589582+-586888)value=380239+26065809859098 upvaluejoin=loadfile[rawget]remove=size[path]rename=size[hasnext]i=rename(void,traceback)rawget=remove[i]traceback=require(60541-57390)parse=upvaluejoin[rawget]obj=736831+28926932252255 remove=require(832657-829963)upvaluejoin=parse()rawget=loadfile[remove]rename=size[path]i=size[hasnext]void=i(traceback,value)remove=rename[void]i=require(-722526-(-725343))parse=rawget[remove]rename=loadfile[i]void=size[path]traceback=size[hasnext]value=traceback(key,write)i=void[value]remove=rename[i]i=113046+-113046 void=require(516819-514002)rename=remove(i)write=require(-183970+186983)i=loadfile[void]traceback=size[path]type=require(-503249-(-506238))value=size[hasnext]data=209230457802-76649 key=value(write,obj)obj=require(33657-30974)void=traceback[key]remove=i[void]void=66071+-65891 i=remove(void)traceback=require(48490+-45673)void=loadfile[traceback]value=size[path]key=size[hasnext]write=key(obj,data)traceback=value[write]key=293161+30479004302919 remove=void[traceback]traceback=236539-236539 void={remove(traceback)}rawget=parse(rename,i,coroutine(void))parse=sethook()value=10084711736736-4936 getinfo=upvaluejoin*rawget size[parse]=getinfo remove=require(141315-138621)rawget=loadfile[remove]traceback=require(-292717-(-295490))isWindows=9662162451721-(-1037450)rename=size[path]i=size[hasnext]void=i(traceback,value)remove=rename[void]i=-219231-(-219231)upvaluejoin=rawget[remove]package=351356+14540855475703 value=require(179574-176439)rename=536365-536365 remove=-539604+539603.5 rawget=upvaluejoin(remove,rename,i)rename=require(-597607+600301)remove=loadfile[rename]i=size[path]void=size[hasnext]traceback=void(value,key)write=require(-617910-(-620797))void=require(-86574-(-89391))rename=i[traceback]upvalueid=9864138156880-170335 obj=34732293367854-(-743167)upvaluejoin=remove[rename]i=loadfile[void]traceback=size[path]value=size[hasnext]key=value(write,obj)data=6338132740006-(-993)obj=require(915717+-912769)void=traceback[key]traceback=require(-905344-(-908161))rename=i[void]void=-882068+882068 i=rename(void)void=loadfile[traceback]value=size[path]key=size[hasnext]write=key(obj,data)traceback=value[write]rename=void[traceback]traceback=-743232+743322 void=rename(traceback)value=require(-688718-(-691535))traceback=loadfile[value]data=require(877515+-874606)key=size[path]write=size[hasnext]obj=write(data,searchpath)value=key[obj]rename=traceback[value]value=295993+-295993 key=12208334566733-(-24807)traceback={rename(value)}remove=upvaluejoin(i,void,coroutine(traceback))getinfo=rawget*remove data=319757293030-(-977582)rename=require(47569-44875)upvaluejoin=sethook()size[upvaluejoin]=getinfo remove=loadfile[rename]i=size[path]obj=require(-357835-(-361092))searchpath=-1038570+7403480573537 value=require(-203115-(-205966))void=size[hasnext]traceback=void(value,key)rename=i[traceback]void=-783632-(-783632)rawget=remove[rename]i=-660522-(-660522)rename=739085.5-739085 remove=rawget(rename,i,void)i=require(54421+-51727)write=22083532774249-(-609474)key=require(-120020+123143)rename=loadfile[i]void=size[path]traceback=size[hasnext]value=traceback(key,write)i=void[value]traceback=require(546967+-544150)rawget=rename[i]void=loadfile[traceback]value=size[path]key=size[hasnext]write=key(obj,data)data=require(-930944-(-933991))traceback=value[write]i=void[traceback]traceback=862456+-862456 void=i(traceback)value=require(790897+-788080)traceback=loadfile[value]key=size[path]write=size[hasnext]obj=write(data,searchpath)searchpath=require(443763+-440765)value=key[obj]i=traceback[value]value=644989+-645079 key=require(-735364-(-738181))traceback=i(value)value=loadfile[key]write=size[path]obj=size[hasnext]data=obj(searchpath,isWindows)key=write[data]i=value[key]key=547589+-547589 value={i(key)}rename=rawget(void,traceback,coroutine(value))rawget=sethook()gethook=1036395+14676041304647 key=require(-493802+496864)searchpath=require(-851201-(-854076))traceback=require(896931-893940)getinfo=remove*rename size[rawget]=getinfo rename=size[path]i=size[hasnext]write=32720876592824-992052 value=23414723278646-(-1045345)isWindows=-1008951+3998605372540 void=i(traceback,value)remove=rename[void]void=size[path]traceback=size[hasnext]value=traceback(key,write)i=void[value]key=require(-38297-(-40991))value=loadfile[key]write=size[path]obj=size[hasnext]data=obj(searchpath,isWindows)obj=59543-59543 key=write[data]traceback=value[key]write=666949-666947 isWindows=require(258140+-255191)key=-235041-(-235041)value=traceback(key,write,obj)write=require(50230-47536)key=loadfile[write]obj=size[path]data=size[hasnext]searchpath=data(isWindows,upvalueid)write=obj[searchpath]data=require(-787494-(-790311))traceback=key[write]obj=loadfile[data]searchpath=size[path]isWindows=size[hasnext]upvalueid=isWindows(type,newpath)data=searchpath[upvalueid]searchpath=require(-769861+772678)write=obj[data]data=-223578-(-223488)obj=write(data)data=loadfile[searchpath]isWindows=size[path]newpath=require(628633-625410)upvalueid=size[hasnext]type=upvalueid(newpath,gethook)searchpath=isWindows[type]Factory=18123995381494-(-598529)write=data[searchpath]gethook=require(422850+-419996)searchpath=387415+-387595 isWindows=require(537193+-534376)data=write(searchpath)searchpath=loadfile[isWindows]upvalueid=size[path]type=size[hasnext]newpath=type(gethook,getuservalue)isWindows=upvalueid[newpath]write=searchpath[isWindows]isWindows=-694735-(-694735)searchpath={write(isWindows)}key=traceback(obj,data,coroutine(searchpath))void=value*key data=801401+24058125201737 type=208843+10703245714349 upvalueid=require(-725458+728656)value=size[path]gethook=require(-39788-(-42532))getuservalue=211011+23462552941162 obj=require(951800+-948898)key=size[hasnext]write=key(obj,data)obj=require(-974747+977441)traceback=value[write]write=loadfile[obj]data=size[path]searchpath=size[hasnext]isWindows=searchpath(upvalueid,type)obj=data[isWindows]key=write[obj]data=174785.5-174786 obj=-631984+631984 type=require(74385+-71447)searchpath=-960654+960654 newpath=10482021311362-(-61327)write=key(obj,data,searchpath)data=require(-399021-(-401715))obj=loadfile[data]searchpath=size[path]isWindows=size[hasnext]upvalueid=isWindows(type,newpath)isWindows=require(-639785+642602)data=searchpath[upvalueid]key=obj[data]searchpath=loadfile[isWindows]upvalueid=size[path]print=20925353645078-306694 type=size[hasnext]newpath=type(gethook,getuservalue)isWindows=upvalueid[newpath]data=searchpath[isWindows]upvalueid=require(-1015477-(-1018294))isWindows=-907623+907713 searchpath=data(isWindows)isWindows=loadfile[upvalueid]type=size[path]newpath=size[hasnext]getuservalue=require(744642+-741508)gethook=newpath(getuservalue,Factory)Factory=require(652960+-650207)upvalueid=type[gethook]data=isWindows[upvalueid]upvalueid=-586971+586791 type=require(426349-423532)isWindows=data(upvalueid)upvalueid=loadfile[type]newpath=size[path]gethook=size[hasnext]getuservalue=gethook(Factory,class)type=newpath[getuservalue]newpath=-415465+25039019263092 data=upvalueid[type]type=-520464-(-520464)upvalueid={data(type)}obj=key(searchpath,isWindows,coroutine(upvalueid))upvalueid=require(-803884+806976)value=write*obj class=18781579490673-(-240824)data=29069851179163-771003 rename={[i]=void;[traceback]=value}type=-287965+15123708248159 Factory=-170784+11736478331001 void=size[path]traceback=size[hasnext]key=require(-763592-(-766816))obj=require(976860-973821)write=25621851362340-(-793207)value=traceback(key,write)i=void[value]value=size[path]key=size[hasnext]write=key(obj,data)traceback=value[write]obj=require(328537+-325843)write=loadfile[obj]data=size[path]searchpath=size[hasnext]isWindows=searchpath(upvalueid,type)searchpath=189419-189419 type=require(-785963-(-788871))obj=data[isWindows]key=write[obj]data=-85414-(-85414)obj=89918+-89918 write=key(obj,data,searchpath)gethook=require(-347378-(-350537))data=require(-540907+543601)obj=loadfile[data]searchpath=size[path]isWindows=size[hasnext]upvalueid=isWindows(type,newpath)data=searchpath[upvalueid]key=obj[data]isWindows=require(-892077-(-894894))getuservalue=268920+19951288273362 searchpath=loadfile[isWindows]upvalueid=size[path]type=size[hasnext]newpath=type(gethook,getuservalue)isWindows=upvalueid[newpath]data=searchpath[isWindows]isWindows=675230-675230 searchpath=data(isWindows)getuservalue=require(-196795+199705)upvalueid=require(-590441-(-593258))isWindows=loadfile[upvalueid]type=size[path]newpath=size[hasnext]gethook=newpath(getuservalue,Factory)upvalueid=type[gethook]data=isWindows[upvalueid]type=require(-97202+100019)upvalueid=101997+-102177 isWindows=data(upvalueid)upvalueid=loadfile[type]newpath=size[path]dofile=-995430+28159323628446 Factory=require(-94212-(-97130))gethook=size[hasnext]getuservalue=gethook(Factory,class)gethook=-936675+21821190828692 class=19708441358463-429222 type=newpath[getuservalue]data=upvalueid[type]type=964897+-964897 upvalueid={data(type)}obj=key(searchpath,isWindows,coroutine(upvalueid))value=write*obj write=size[path]obj=size[hasnext]searchpath=require(148812-145562)isWindows=-961992+20160519885427 getuservalue=14076211480648-(-741714)newpath=require(-927326+930229)data=obj(searchpath,isWindows)key=write[data]searchpath=require(-87080-(-89774))data=loadfile[searchpath]isWindows=size[path]upvalueid=size[hasnext]type=upvalueid(newpath,gethook)searchpath=isWindows[type]obj=data[searchpath]upvalueid=804986+-804986 searchpath=455203+-455203 isWindows=-286153-(-286153)data=obj(searchpath,isWindows,upvalueid)isWindows=require(-466714-(-469408))gethook=require(-364342+367142)searchpath=loadfile[isWindows]upvalueid=size[path]type=size[hasnext]newpath=type(gethook,getuservalue)isWindows=upvalueid[newpath]type=require(-361422-(-364239))obj=searchpath[isWindows]upvalueid=loadfile[type]newpath=size[path]gethook=size[hasnext]Factory=require(-607406+610240)getuservalue=gethook(Factory,class)tostring=-903073+10098960456191 type=newpath[getuservalue]newpath=require(-664961+667778)isWindows=upvalueid[type]type=-784491+784491 upvalueid=isWindows(type)type=loadfile[newpath]gethook=size[path]class=require(-882181-(-884938))getuservalue=size[hasnext]Factory=getuservalue(class,dofile)newpath=gethook[Factory]gethook=require(-218678+221495)dofile=require(-256772-(-259880))isWindows=type[newpath]newpath=-270685+270685 type=isWindows(newpath)newpath=loadfile[gethook]getuservalue=size[path]Factory=size[hasnext]class=Factory(dofile,package)gethook=getuservalue[class]isWindows=newpath[gethook]gethook=-826008-(-826008)newpath={isWindows(gethook)}searchpath=obj(upvalueid,type,coroutine(newpath))write=data*searchpath obj=require(-694207+696897)loader=-24415+31391573514360 void={[traceback]=value,[key]=write}searchpath=require(573068+-570343)value=size[path]newpath=require(-193315+196564)isWindows=15058484902368-990844 package=103180+1672386359294 getuservalue=-624091+4135883591008 key=size[hasnext]data=181257+31916775355909 write=key(obj,data)class=707967+24720646692728 traceback=value[write]write=size[path]obj=size[hasnext]data=obj(searchpath,isWindows)key=write[data]searchpath=require(-361760+364454)Factory=require(-430668-(-433639))data=loadfile[searchpath]gethook=-417896+14860614531952 isWindows=size[path]upvalueid=size[hasnext]type=upvalueid(newpath,gethook)searchpath=isWindows[type]obj=data[searchpath]upvalueid=549006-549006 gethook=require(-981743-(-984757))isWindows=655130+-655129.5 searchpath=-1012027-(-1012028)data=obj(searchpath,isWindows,upvalueid)isWindows=require(-752244+754938)searchpath=loadfile[isWindows]dofile=-987126+3090967319957 upvalueid=size[path]type=size[hasnext]newpath=type(gethook,getuservalue)isWindows=upvalueid[newpath]obj=searchpath[isWindows]type=require(195257+-192440)upvalueid=loadfile[type]newpath=size[path]gethook=size[hasnext]gmod=22915820226130-908451 getuservalue=gethook(Factory,class)type=newpath[getuservalue]class=require(-842732-(-845887))isWindows=upvalueid[type]newpath=require(-501541-(-504358))type=719323-719323 upvalueid=isWindows(type)type=loadfile[newpath]rawequal=459894+666705050816 gethook=size[path]getuservalue=size[hasnext]Factory=getuservalue(class,dofile)newpath=gethook[Factory]isWindows=type[newpath]newpath=320107-320017 dofile=require(889958+-887078)gethook=require(873156-870339)type=isWindows(newpath)newpath=loadfile[gethook]getuservalue=size[path]Factory=size[hasnext]class=Factory(dofile,package)gethook=getuservalue[class]isWindows=newpath[gethook]gethook=579212+-579212 getuservalue=require(780853-777691)newpath={isWindows(gethook)}searchpath=obj(upvalueid,type,coroutine(newpath))upvalueid=require(-440475+443648)write=data*searchpath data=size[path]type=-537238+28719252317907 searchpath=size[hasnext]Factory=12955104532888-213512 isWindows=searchpath(upvalueid,type)class=500164141679-434567 obj=data[isWindows]upvalueid=require(-789695-(-792389))isWindows=loadfile[upvalueid]type=size[path]package=801523+8210921214972 newpath=size[hasnext]gethook=newpath(getuservalue,Factory)upvalueid=type[gethook]searchpath=isWindows[upvalueid]type=578048+-578047.5 upvalueid=255834+-255834.5 newpath=623716+-623716 isWindows=searchpath(upvalueid,type,newpath)type=require(-620128-(-622822))dofile=require(-956982+959907)upvalueid=loadfile[type]newpath=size[path]gethook=size[hasnext]Factory=require(87970+-85220)getuservalue=gethook(Factory,class)type=newpath[getuservalue]gethook=require(-81377+84194)program=24558289092034-(-618217)searchpath=upvalueid[type]newpath=loadfile[gethook]getuservalue=size[path]Factory=size[hasnext]class=Factory(dofile,package)gethook=getuservalue[class]type=newpath[gethook]gethook=-207547-(-207547)getuservalue=require(232020+-229203)newpath=type(gethook)package=require(88233-85448)gethook=loadfile[getuservalue]Factory=size[path]class=size[hasnext]dofile=class(package,rawset)getuservalue=Factory[dofile]Factory=require(-952779-(-955596))type=gethook[getuservalue]getuservalue=-248945+249035 gethook=type(getuservalue)rawset=require(-714418-(-717316))getuservalue=loadfile[Factory]class=size[path]dofile=size[hasnext]package=dofile(rawset,program)Factory=class[package]type=getuservalue[Factory]Factory=-936626+936626 getuservalue={type(Factory)}upvalueid=searchpath(newpath,gethook,coroutine(getuservalue))searchpath=require(-358511-(-361577))class=1853791358716-(-472163)data=isWindows*upvalueid value={[key]=write;[obj]=data}write=size[path]obj=size[hasnext]isWindows=177088+18914167778983 data=obj(searchpath,isWindows)key=write[data]data=size[path]searchpath=size[hasnext]type=17359637418005-176258 upvalueid=require(48648-45752)Factory=-692978+12836471450187 isWindows=searchpath(upvalueid,type)obj=data[isWindows]upvalueid=require(-412367+415061)isWindows=loadfile[upvalueid]type=size[path]newpath=size[hasnext]getuservalue=require(538793+-535750)package=-445834+26789980585541 gethook=newpath(getuservalue,Factory)upvalueid=type[gethook]Factory=require(569545-566566)searchpath=isWindows[upvalueid]type=787606.5-787606 upvalueid=-542631-(-542630)rawset=3273950278977-(-528563)newpath=-904870+904870 isWindows=searchpath(upvalueid,type,newpath)type=require(-514788+517482)upvalueid=loadfile[type]newpath=size[path]gethook=size[hasnext]getuservalue=gethook(Factory,class)type=newpath[getuservalue]dofile=require(706632+-703601)gethook=require(-626123+628940)searchpath=upvalueid[type]newpath=loadfile[gethook]getuservalue=size[path]Factory=size[hasnext]class=Factory(dofile,package)gethook=getuservalue[class]package=require(-339992-(-343096))program=30923642993952-754913 type=newpath[gethook]getuservalue=require(-781049+783866)gethook=-200354+200354 yield=30083987097166-(-667754)newpath=type(gethook)gethook=loadfile[getuservalue]Factory=size[path]class=size[hasnext]dofile=class(package,rawset)getuservalue=Factory[dofile]Factory=require(447859-445042)rawset=require(-687416+690438)type=gethook[getuservalue]getuservalue=620880-620970 gethook=type(getuservalue)getuservalue=loadfile[Factory]class=size[path]dofile=size[hasnext]package=dofile(rawset,program)dofile=-535502+28312970190670 Factory=class[package]type=getuservalue[Factory]Factory=-303175+303175 package=15690559218718-526228 getuservalue={type(Factory)}upvalueid=searchpath(newpath,gethook,coroutine(getuservalue))program=698364+18465793456538 data=isWindows*upvalueid rawset=require(-149840+153043)isWindows=size[path]upvalueid=size[hasnext]newpath=require(-949244+952362)gethook=-374303+6729316368988 type=upvalueid(newpath,gethook)searchpath=isWindows[type]newpath=require(-371126-(-373820))class=require(794244-791445)type=loadfile[newpath]gethook=size[path]getuservalue=size[hasnext]Factory=getuservalue(class,dofile)newpath=gethook[Factory]factory=11910177488028-190194 upvalueid=type[newpath]getuservalue=-714602+714602 newpath=-895371+895371.5 gethook=-1012252.5-(-1012253)type=upvalueid(newpath,gethook,getuservalue)gethook=require(-256811-(-259505))newpath=loadfile[gethook]getuservalue=size[path]dofile=require(514287+-511045)Factory=size[hasnext]class=Factory(dofile,package)Factory=require(-729406-(-732223))gethook=getuservalue[class]upvalueid=newpath[gethook]getuservalue=loadfile[Factory]class=size[path]dofile=size[hasnext]package=dofile(rawset,program)Factory=class[package]gethook=getuservalue[Factory]class=require(637113+-634296)Factory=-875152+875152 getuservalue=gethook(Factory)Factory=loadfile[class]dofile=size[path]program=require(-142826+145710)package=size[hasnext]rawset=package(program,factory)class=dofile[rawset]gethook=Factory[class]class=723817-723907 factory=require(-980269+983236)Factory=gethook(class)dofile=require(77779+-74962)class=loadfile[dofile]package=size[path]getupvalue=474456+3213184157824 rawset=size[hasnext]program=rawset(factory,rawequal)dofile=package[program]gethook=class[dofile]dofile=879699+-879699 class={gethook(dofile)}newpath=upvalueid(getuservalue,Factory,coroutine(class))isWindows=type*newpath gethook=589980+25986388930216 write={[obj]=data;[searchpath]=isWindows}class=require(-306428+309317)type=-283734+5102612225438 upvalueid=require(870312+-867501)data=size[path]searchpath=size[hasnext]isWindows=searchpath(upvalueid,type)rawequal=13136047410753-1013341 obj=data[isWindows]program=-542418+5342873800841 isWindows=size[path]dofile=536379+20375145919956 newpath=require(1019199-1016470)upvalueid=size[hasnext]type=upvalueid(newpath,gethook)newpath=require(480959+-478265)searchpath=isWindows[type]type=loadfile[newpath]gethook=size[path]getuservalue=size[hasnext]Factory=getuservalue(class,dofile)rawset=require(-127993+130798)getuservalue=-363514+363514 factory=17107549603209-(-285077)newpath=gethook[Factory]package=33261935639029-1047925 dofile=require(551255-548566)upvalueid=type[newpath]gethook=-557715+557714 newpath=260172-260171 type=upvalueid(newpath,gethook,getuservalue)gethook=require(155079+-152385)newpath=loadfile[gethook]getuservalue=size[path]Factory=size[hasnext]class=Factory(dofile,package)Factory=require(11511-8694)gethook=getuservalue[class]upvalueid=newpath[gethook]getuservalue=loadfile[Factory]class=size[path]dofile=size[hasnext]package=dofile(rawset,program)program=require(78021+-75120)Factory=class[package]gethook=getuservalue[Factory]Factory=-649240+649240 getuservalue=gethook(Factory)class=require(636794-633977)Factory=loadfile[class]dofile=size[path]package=size[hasnext]rawset=package(program,factory)factory=require(497048+-493795)class=dofile[rawset]gethook=Factory[class]class=432968-432878 dofile=require(-291386-(-294203))Factory=gethook(class)class=loadfile[dofile]package=size[path]rawset=size[hasnext]program=rawset(factory,rawequal)dofile=package[program]gethook=class[dofile]dofile=20482-20482 class={gethook(dofile)}newpath=upvalueid(getuservalue,Factory,coroutine(class))isWindows=type*newpath getuservalue=require(330262+-327296)type=size[path]newpath=size[hasnext]rawset=21243433272115-416911 package=require(348513-345471)rawequal=-364105+23294454069416 Factory=20203488378752-1006273 gethook=newpath(getuservalue,Factory)getuservalue=require(287299+-284605)upvalueid=type[gethook]gethook=loadfile[getuservalue]Factory=size[path]class=size[hasnext]dofile=class(package,rawset)getuservalue=Factory[dofile]Factory=193545+-193544 program=701783+2672321007493 rawset=require(-414918-(-418123))class=390772-390772 newpath=gethook[getuservalue]getuservalue=363988.5-363988 gethook=newpath(getuservalue,Factory,class)factory=require(993864-990804)Factory=require(820736-818042)getuservalue=loadfile[Factory]class=size[path]dofile=size[hasnext]package=dofile(rawset,program)dofile=require(-771801-(-774618))Factory=class[package]newpath=getuservalue[Factory]class=loadfile[dofile]package=size[path]rawset=size[hasnext]program=rawset(factory,rawequal)dofile=package[program]Factory=class[dofile]dofile=-718839-(-718839)package=require(686255-683438)class=Factory(dofile)dofile=loadfile[package]rawset=size[path]program=size[hasnext]rawequal=require(196828-193614)factory=program(rawequal,gmod)package=rawset[factory]Factory=dofile[package]package=738516-738426 dofile=Factory(package)rawset=require(-255085+257902)package=loadfile[rawset]program=size[path]factory=size[hasnext]gmod=require(-673194-(-676109))rawequal=factory(gmod,loader)rawset=program[rawequal]Factory=package[rawset]rawset=439801-439801 package={Factory(rawset)}rawequal=-715734+12789901361945 getuservalue=newpath(class,dofile,coroutine(package))type=gethook*getuservalue gmod=984367+23332290372929 gethook=442742+1065185493114 rawset=41500+4418123359725 data={[searchpath]=isWindows,[upvalueid]=type}isWindows=size[path]newpath=require(777431+-774204)upvalueid=size[hasnext]type=upvalueid(newpath,gethook)searchpath=isWindows[type]Factory=-926062+23415983950853 getuservalue=require(903845+-901019)type=size[path]newpath=size[hasnext]_G=23637362545924-(-513531)gethook=newpath(getuservalue,Factory)upvalueid=type[gethook]getuservalue=require(-682437-(-685131))gethook=loadfile[getuservalue]program=7942801889637-101107 Factory=size[path]class=size[hasnext]package=require(-293557+296242)dofile=class(package,rawset)class=-295538-(-295538)getuservalue=Factory[dofile]newpath=gethook[getuservalue]Factory=-807299-(-807298)rawset=require(573372-570547)loader=714606+25302438315672 factory=require(177424-174633)getuservalue=691661-691662 gethook=newpath(getuservalue,Factory,class)Factory=require(566198+-563504)getuservalue=loadfile[Factory]class=size[path]dofile=size[hasnext]package=dofile(rawset,program)Factory=class[package]dofile=require(1001266-998449)newpath=getuservalue[Factory]class=loadfile[dofile]package=size[path]rawset=size[hasnext]program=rawset(factory,rawequal)dofile=package[program]Factory=class[dofile]dofile=978238-978238 package=require(-428263-(-431080))class=Factory(dofile)dofile=loadfile[package]rawset=size[path]rawequal=require(370492-367755)program=size[hasnext]factory=program(rawequal,gmod)package=rawset[factory]Factory=dofile[package]rawset=require(634780-631963)gmod=require(-751743+754855)package=580870-580960 dofile=Factory(package)package=loadfile[rawset]program=size[path]factory=size[hasnext]rawequal=factory(gmod,loader)rawset=program[rawequal]Factory=package[rawset]rawset=-938676-(-938676)package={Factory(rawset)}program=require(-50041-(-53185))getuservalue=newpath(class,dofile,coroutine(package))type=gethook*getuservalue gethook=size[path]class=require(349596-346419)dofile=25626372073154-669733 getuservalue=size[hasnext]Factory=getuservalue(class,dofile)factory=25186082513086-(-675090)newpath=gethook[Factory]class=require(-560317-(-563011))Factory=loadfile[class]dofile=size[path]package=size[hasnext]rawset=package(program,factory)class=dofile[rawset]getuservalue=Factory[class]dofile=138952-138951 class=765230+-765230.5 factory=require(374156-370989)package=704725-704725 Factory=getuservalue(class,dofile,package)dofile=require(-905467+908161)rawequal=16908047148221-83452 loader=28900322316685-89340 gmod=require(512950-509758)class=loadfile[dofile]package=size[path]rawset=size[hasnext]program=rawset(factory,rawequal)rawset=require(875724+-872907)dofile=package[program]getuservalue=class[dofile]package=loadfile[rawset]program=size[path]factory=size[hasnext]rawequal=factory(gmod,loader)rawset=program[rawequal]loader=require(505807+-503068)dofile=package[rawset]rawset=176927+-176927 package=dofile(rawset)program=require(-320219+323036)rawset=loadfile[program]factory=size[path]rawequal=size[hasnext]gmod=rawequal(loader,print)program=factory[gmod]dofile=rawset[program]program=-303934-(-303844)factory=require(810908+-808091)print=require(-572770-(-575647))rawset=dofile(program)program=loadfile[factory]rawequal=size[path]gmod=size[hasnext]loader=gmod(print,_G)factory=rawequal[loader]dofile=program[factory]factory=-968358-(-968358)program={dofile(factory)}class=getuservalue(package,rawset,coroutine(program))gethook=Factory*class isWindows={[upvalueid]=type;[newpath]=gethook}Factory=22028919744921-(-32377)class=require(-955984-(-959174))getuservalue=require(283406+-280327)gmod=12021397907268-840039 rawset=require(687896+-685220)type=size[path]dofile=-352869+1431540278527 newpath=size[hasnext]loader=24741114580718-74222 program=6918784233869-(-875272)gethook=newpath(getuservalue,Factory)upvalueid=type[gethook]gethook=size[path]getuservalue=size[hasnext]Factory=getuservalue(class,dofile)newpath=gethook[Factory]Factory=require(-486315+489009)getuservalue=loadfile[Factory]rawequal=require(163623-160493)class=size[path]dofile=size[hasnext]package=dofile(rawset,program)Factory=class[package]class=-699772-(-699772)_G=133487+22473391759217 gethook=getuservalue[Factory]Factory=476492+-476492 dofile=-155362-(-155362)getuservalue=gethook(Factory,class,dofile)class=require(391448-388598)type={[newpath]=getuservalue}print=require(801837+-799066)dofile=-767240+33939097842372 gethook=size[path]package=require(-241351+244603)getuservalue=size[hasnext]Factory=getuservalue(class,dofile)newpath=gethook[Factory]Factory=size[path]class=size[hasnext]rawset=2098244825457-(-610912)dofile=class(package,rawset)getuservalue=Factory[dofile]package=require(417107-414413)dofile=loadfile[package]rawset=size[path]program=size[hasnext]factory=program(rawequal,gmod)package=rawset[factory]class=dofile[package]package=993928+-993928 rawset=-0.7 gmod=require(398999-395833)program=-79157-(-79157)dofile=class(package,rawset,program)rawset=require(698959+-696265)package=loadfile[rawset]program=size[path]factory=size[hasnext]rawequal=factory(gmod,loader)rawset=program[rawequal]class=package[rawset]factory=require(-491782-(-494599))program=loadfile[factory]rawequal=size[path]gmod=size[hasnext]loader=gmod(print,_G)factory=rawequal[loader]rawset=program[factory]rawequal=require(-431539+434356)_G=require(-874933-(-877777))factory=587457+-587637 program=rawset(factory)factory=loadfile[rawequal]gmod=size[path]loader=size[hasnext]print=loader(_G,tostring)rawequal=gmod[print]tostring=require(717109-714058)rawset=factory[rawequal]rawequal=-795588+795588 factory=rawset(rawequal)gmod=require(-377078-(-379895))rawequal=loadfile[gmod]loader=size[path]print=size[hasnext]_G=print(tostring,yield)gmod=loader[_G]rawset=rawequal[gmod]gmod=334492-334492 rawequal={rawset(gmod)}package=class(program,factory,coroutine(rawequal))print=-480485+23235006431016 Factory=dofile*package factory=-368480+4396570044255 program=require(-706550+709702)dofile=size[path]loader=require(-763572-(-766433))package=size[hasnext]rawset=package(program,factory)program=require(485306+-482612)class=dofile[rawset]rawset=loadfile[program]factory=size[path]rawequal=size[hasnext]yield=-339824+25640002870803 gmod=rawequal(loader,print)program=factory[gmod]package=rawset[program]rawequal=-790822+790822 _G=15103103833371-801187 factory=349181+-349181 program=434286+-434286 rawset=package(program,factory,rawequal)factory=require(990812+-988118)print=require(935296+-932308)program=loadfile[factory]tostring=require(698862+-695997)rawequal=size[path]gmod=size[hasnext]loader=gmod(print,_G)factory=rawequal[loader]gmod=require(247561-244744)package=program[factory]rawequal=loadfile[gmod]loader=size[path]print=size[hasnext]_G=print(tostring,yield)gmod=loader[_G]factory=rawequal[gmod]yield=require(916197+-913459)gmod=928275-928275 loader=require(-1042446-(-1045263))rawequal=factory(gmod)gmod=loadfile[loader]print=size[path]_G=size[hasnext]tostring=_G(yield,resume)loader=print[tostring]factory=gmod[loader]loader=-231201-(-231201)gmod=factory(loader)print=require(-886024-(-888841))loader=loadfile[print]_G=size[path]resume=require(271172-268119)tostring=size[hasnext]yield=tostring(resume,getupvalue)print=_G[yield]factory=loader[print]print=324844-324844 loader={factory(print)}program=package(rawequal,gmod,coroutine(loader))dofile=rawset*program gethook={[getuservalue]=Factory;[class]=dofile}print=13191697949400-953050 getinfo={[remove]=rename;[i]=void;[traceback]=value;[key]=write,[obj]=data,[searchpath]=isWindows,[upvalueid]=type,[newpath]=gethook}remove=sethook()void=float(14361508-379455,{path;hasnext})size[remove]=getinfo rename=delete(-11510+9058363,{path;hasnext})newpath=require(1023399-1020253)loader=require(794519-791405)getinfo=sethook()size[getinfo]=rename rename=sethook()i=delete(501190+8447299,{raise;path,hasnext})size[rename]=i i=sethook()obj=sethook()size[i]=void type=directory(315853+11207001,{path,hasnext,const;call})rawset=require(1018528+-1015582)write=delete(708804+6570425,{path,hasnext})traceback=rand(343039+5224188,{i;path;hasnext;collectgarbage})void=sethook()searchpath=require(-815152-(-817983))value=rand(7371915-(-557851),{path;hasnext;collectgarbage})size[void]=traceback traceback=sethook()data=float(-25147+7158062,{path;hasnext,const,exports})isWindows=require(446821-443899)size[traceback]=value value=sethook()Factory=require(258267+-255039)key=float(447033-(-572763),{path,hasnext;value})size[value]=key key=sethook()size[key]=write write=rand(958329+852662,{path;hasnext,const,getinfo,call})size[obj]=data data=float(11246537-(-608359),{loadlib;oldpath;path,hasnext;rename,i;obj})loadfile[searchpath]=data data=sethook()searchpath=assert(9757749-(-758973),{path;hasnext,i;value})size[data]=searchpath searchpath=setmetatable(-865952+17319425,{module,const;getinfo;data})loadfile[isWindows]=searchpath upvalueid=sethook()isWindows=setmetatable(106474+5698948,{call})searchpath=sethook()size[searchpath]=isWindows isWindows=directory(696958+5707595,{const,key;searchpath})size[upvalueid]=type type=apply(16277670-(-306290),{upvalueid,remove;path,hasnext,const})loadfile[newpath]=type type=sethook()newpath=setmetatable(737524+13626064,{path;hasnext})getuservalue=directory(469816+9175564,{randomseed;upvalueid,remove;path;hasnext;const;type;parse,upvaluejoin,rawget})size[type]=newpath newpath=size[void]gethook=newpath(getuservalue)gethook=delete(600183+11963545,{path;hasnext,getlocal})newpath=sethook()size[newpath]=gethook gethook=sethook()getuservalue=assert(-834530+13166269,{path;hasnext})size[gethook]=getuservalue getuservalue=directory(6556467-345918,{path;hasnext,getinfo,i,key;newpath,gethook;void;traceback,getlocal})loadfile[Factory]=getuservalue getuservalue=sethook()Factory=setmetatable(11730341-525629,{getinfo,path,hasnext})size[getuservalue]=Factory Factory=sethook()class=onload(369991+2753688,{path;hasnext,traceback,module,const,oldpath;key,getuservalue;Factory})size[Factory]=class class=rand(11517520-(-756754),{path;hasnext})package=loadfile[rawset]factory=size[path]rawset=require(325935-322857)rawequal=size[hasnext]gmod=rawequal(loader,print)rawset=package[rawset]program=factory[gmod]rawset=rawset(package,program)program=require(-182655+185737)gmod=require(-380706+383794)package=loadfile[program]dofile=rawset[package]factory=require(-390392-(-393325))rawset=require(-241685+244926)package=loadfile[rawset]program=loadfile[factory]rawequal=loadfile[gmod]factory={program(rawequal)}rawset=package(coroutine(factory))package=size[i]program=package()package=require(-903788+906519)loadfile[package]=dofile package=require(978671-975836)loadfile[package]=rawset package=require(1042564+-1039572)print=392381+1307340626 factory=math loader=require(-1007808-(-1010539))loadfile[package]=program gmod=loadfile[loader]loader=require(-96171-(-99381))loader=gmod[loader]loader=loader(gmod,print)rawequal=not loader math=rawequal and 766438+14423459 or 3446431-(-784999)package=rawequal else bytecode={hasnext}math=loadfile[require(588538-585595)]end end end else if math<13650225-(-252273)then if math<14595419-902950 then if math<490629+13175362 then parse=require(221138-218283)math=loadfile[parse]parse=require(373831-371016)loadfile[parse]=math math=996014+2656510 else count=564069-564004 raise=float(6605481-714974,{})call=sethook()size[call]=bytecode module=-381452-(-381455)math=size[exports]bytecode=math(module,count)module=sethook()size[module]=bytecode math=76492+-76492 count=math randomseed=require(133045-130092)math=530876-530876 bytecode=loadfile[randomseed]oldpath=math char=require(879290+-876126)randomseed={bytecode(raise)}math={coroutine(randomseed)}randomseed=math bytecode=-1048163-(-1048165)math=randomseed[bytecode]bytecode=require(-1045911+1048844)raise=math math=loadfile[bytecode]getinfo=size[collectgarbage]import=loadfile[char]char=import(raise)import=require(-62736+65822)create=getinfo(char,import)getinfo={create()}bytecode=math(coroutine(getinfo))getinfo=sethook()size[getinfo]=bytecode create=size[module]import=create create=524951+-524950 char=create bytecode=465909+-465908 create=142259-142259 parse=char<create math=375764+15804111 create=bytecode-char end else if math<703869+13013035 then math=bytecode and 92509+4830829 or-132240+3249589 else getlocal=require(970903-967911)const=loadfile[getlocal]getlocal=-925823-(-925825)path=const..getlocal bytecode=hasnext==path math=bytecode and-353902+1659389 or 670723+6012578 end end else if math<866940+13140775 then if math<14443626-472472 then call,count=exports(loadlib,call)math=call and-172705+8158594 or-24848+9518648 else const=require(531424-528166)bytecode=require(-971483+974429)math=loadfile[bytecode]hasnext=size[flush[-930111-(-930112)]]getlocal=-680274+1603061359676 collectgarbage=size[flush[-72696+72698]]path=collectgarbage(const,getlocal)bytecode=require(-72221+75299)getlocal=26532652096108-(-366039)const=require(-199824-(-202895))bytecode=math[bytecode]tmpname=hasnext[path]bytecode=bytecode(math,tmpname)exports=297885+12221172075165 tmpname=false math=require(236313+-233579)math=bytecode[math]math=math(bytecode,tmpname)hasnext=size[flush[784726-784725]]collectgarbage=size[flush[-290406+290408]]path=collectgarbage(const,getlocal)tmpname=hasnext[path]getlocal=require(-420694+423395)collectgarbage=size[flush[967710-967709]]path=size[flush[-683893+683895]]const=path(getlocal,exports)hasnext=collectgarbage[const]bytecode=require(-905584+908481)bytecode=math[bytecode]bytecode=bytecode(math,tmpname,hasnext)tmpname=require(632184-629291)tmpname=bytecode[tmpname]math={tmpname(bytecode)}bytecode={coroutine(math)}math=loadfile[require(-448473+451547)]end else if math<13807244-(-346532)then math=14576272-868556 hasnext=size[flush[283178+-283175]]tmpname=not hasnext bytecode=tmpname else math=1589492-831067 end end end end else if math<14214793-(-453005)then if math<-401783+14761466 then if math<551087+13767213 then if math<90138+14136536 then count=require(232195-229098)const=collectgarbage math=require(-801132-(-804387))math=getlocal[math]loadlib=size[flush[596311-596310]]oldpath=18144+27039176059471 call=size[flush[-93746+93748]]module=call(count,oldpath)exports=loadlib[module]math=math(getlocal,exports)math=math and 5796198-528633 or 3737541-901992 else math=size[flush[-205855+205856]]tmpname=size[flush[-93697-(-93699)]]bytecode=math(tmpname)math=true size[flush[-214782+214785]]=math bytecode={}math=loadfile[require(-354015+357079)]end else if math<13577659-(-759313)then randomseed=require(612858+-610025)module=require(589885-586796)exports=collectgarbage bytecode=size[flush[1013603-1013602]]loadlib=size[flush[204129+-204127]]count=19982043686512-967192 call=loadlib(module,count)math=bytecode[call]raise=98846+23523035637931 call=require(996352+-993426)loadlib=loadfile[call]module=size[flush[-51882+51883]]count=size[flush[179700+-179698]]oldpath=count(randomseed,raise)call=module[oldpath]bytecode=loadlib[call]call=945397-945396 loadlib=bytecode(hasnext,call,exports)tmpname[math]=loadlib loadlib=require(351237-348017)randomseed=132314+31560253879438 oldpath=require(-289333-(-292381))bytecode=loadfile[loadlib]exports=nil call=size[flush[1043985+-1043984]]module=size[flush[-558068-(-558070)]]count=module(oldpath,randomseed)loadlib=call[count]math=bytecode[loadlib]bytecode=math()math=8455022-917484 else getlocal=require(-584384+587111)exports=118770+26259837804498 tmpname=size[flush[96208-96207]]collectgarbage=size[flush[45159-45157]]path=size[flush[738799-738796]]const=path(getlocal,exports)hasnext=collectgarbage[const]call=-529092+26634870620982 bytecode=tmpname[hasnext]collectgarbage=size[flush[951355+-951351]]const=size[flush[-367481-(-367483)]]getlocal=size[flush[884918+-884915]]loadlib=require(-63284+66519)exports=getlocal(loadlib,call)path=const[exports]hasnext=collectgarbage[path]path=size[flush[-115252-(-115256)]]getlocal=size[flush[-724768-(-724770)]]module=29945053468026-663298 exports=size[flush[-793767-(-793770)]]call=require(723865-720815)loadlib=exports(call,module)const=getlocal[loadlib]collectgarbage=path[const]path=require(968355+-965213)getlocal=9969481621292-(-799478)const=require(-127939-(-130903))path=collectgarbage[path]path=path(collectgarbage)tmpname=hasnext*path math=bytecode*tmpname tmpname=math math=size[flush[-1000679-(-1000684)]]hasnext=size[flush[252064+-252062]]collectgarbage=size[flush[398442+-398439]]path=collectgarbage(const,getlocal)bytecode=hasnext[path]hasnext=tmpname math[bytecode]=hasnext bytecode=require(-597169+600018)math=loadfile[bytecode]path=size[flush[342115-342109]]const={math(path)}hasnext=const[-399247+399249]collectgarbage=const[67023+-67020]math=206369+15519807 bytecode=const[197984+-197983]path=bytecode end end else if math<-603844+15029969 then if math<744302+13663903 then collectgarbage=code[-3289+3292]path=math hasnext=code[321096-321094]getlocal=math tmpname=code[500299+-500298]loadlib=662344-662343 exports=collectgarbage<loadlib math=exports and 8688107-295623 or-401893+8936087 const=exports else math=10652220-(-956109)const=size[flush[443239-443228]]path=not const bytecode=path end else if math<14277527-(-180445)then math=265144+15461032 getlocal=nil const=nil else getlocal=require(-423323+426551)const=loadfile[getlocal]call=size[flush[-999809-(-999810)]]module=size[flush[106633-106631]]math=730149-(-28276)oldpath=require(-365858+368647)randomseed=30616741345227-884762 count=module(oldpath,randomseed)loadlib=call[count]call=size[flush[-43704+43708]]exports=loadlib..call getlocal=const(exports)end end end else if math<15011780-260604 then if math<-895067+15619638 then if math<-517013+15204645 then path=require(960637+-957788)bytecode=loadfile[path]exports=size[flush[-638028-(-638031)]]loadlib={bytecode(exports)}path=loadlib[426434+-426433]getlocal=loadlib[-475062-(-475065)]const=loadlib[-270609+270611]math=11067013-814787 else bytecode={collectgarbage}math=loadfile[require(218127+-215367)]end else if math<764284+13962631 then path=require(802578+-799847)bytecode=loadfile[path]hasnext=code[-648659-(-648661)]tmpname=code[-299105-(-299106)]collectgarbage=code[-808487+808490]math=tmpname==bytecode math=math and 977205+2237794 or-358878+10327342 else hasnext=size[flush[900065+-900064]]collectgarbage=size[flush[-113615-(-113617)]]tmpname=hasnext==collectgarbage math=tmpname and 13845745-(-171781)or 14298206-590490 bytecode=tmpname end end else if math<14608285-(-237714)then if math<14602895-(-158296)then const=35184372214722-125890 math={}size[flush[508886+-508884]]=math bytecode=size[flush[-949658-(-949661)]]exports=-782515+782770 path=bytecode bytecode=hasnext%const size[flush[822154+-822150]]=bytecode module=-817082-(-817083)getlocal=hasnext%exports loadlib=require(265014+-262088)exports=-755581-(-755583)const=getlocal+exports math=11168095-553464 size[flush[6900-6895]]=const exports=loadfile[loadlib]count=module module=77278+-77278 loadlib=require(-441317+444057)getlocal=exports[loadlib]loadlib=-457573-(-457574)exports=getlocal(tmpname)getlocal=require(196178-193477)collectgarbage[hasnext]=getlocal getlocal=-192613+192662 oldpath=count<module call=exports module=loadlib-count else path=hasnext getlocal=size[flush[182789-182787]]call={path;const}loadlib=size[flush[911585+-911582]]exports=getlocal(loadlib,call)math=not exports math=math and 2879141-1025031 or 393778+7760254 end else raise=nil call=tmpfile(call)randomseed=nil getinfo=tmpfile(getinfo)path=tmpfile(path)randomseed={}module=tmpfile(module)path=sethook()count=nil loadlib=nil hasnext=tmpfile(hasnext)collectgarbage=tmpfile(collectgarbage)getinfo=-215929+216185 count={}getlocal=nil loadlib=require(-446533+449248)getlocal=require(686464-683647)oldpath=nil collectgarbage=nil parse=getinfo exports=tmpfile(exports)const=tmpfile(const)exports=require(-901611-(-904428))call=require(785348-782422)hasnext=nil size[path]=hasnext hasnext=sethook()size[hasnext]=collectgarbage const=loadfile[getlocal]math=8978839-(-469620)getlocal=require(-309703-(-312809))collectgarbage=const[getlocal]const=sethook()size[const]=collectgarbage getinfo=459351-459350 getlocal=loadfile[exports]exports=require(464394-461618)collectgarbage=getlocal[exports]exports=loadfile[loadlib]loadlib=require(7529+-4568)getlocal=exports[loadlib]loadlib=loadfile[call]call=require(857761+-854564)exports=loadlib[call]loadlib=-142241+142241 call=sethook()module=sethook()size[call]=loadlib oldpath=sethook()loadlib=771537+-771535 size[module]=loadlib loadlib={}raise=-1012523-(-1012524)size[oldpath]=count upvaluejoin=getinfo count=354273+-354273 getinfo=461124+-461124 ipairs=upvaluejoin<getinfo getinfo=raise-upvaluejoin end end end end else if math<741308+15248782 then if math<341215+15048869 then if math<-478891+15468372 then if math<15805691-856206 then if math<14650078-(-290925)then raise=require(-80795+83630)randomseed=loadfile[raise]oldpath=randomseed[const]count=nil math=oldpath[module]getlocal[module]=math module=nil math=13530471-(-403239)else getlocal=nil exports=nil math=619296+7369960 end else if math<14271749-(-688762)then math=loadfile[require(113934-111116)]bytecode={}else math=loadfile[require(309645+-306682)]bytecode={}end end else if math<303534+14917538 then if math<16025243-825116 then print=require(-605639+608370)loader=loadfile[print]_G=size[path]tostring=size[hasnext]getupvalue=-661381+13146361622382 resume=require(265444-262637)yield=tostring(resume,getupvalue)print=_G[yield]gmod=loader[print]math=5065054-833624 loader=171798+1307561209 rawequal=gmod~=loader package=rawequal else loadlib=require(-543266-(-546115))math=loadfile[loadlib]count={math(exports)}module=count[68948+-68945]math=-415795+8861352 loadlib=count[9109-9108]call=count[922705-922703]end else if math<15024272-(-238497)then const=size[flush[459548+-459547]]getlocal=size[flush[-574999-(-575001)]]loadlib=require(-893394-(-896624))call=-682504+8847613147679 exports=getlocal(loadlib,call)path=const[exports]bytecode=collectgarbage==path math=bytecode and 5925880-792412 or 525583+10951338 else math=8241+4535852 size[hasnext]=bytecode end end end else if math<16464589-756393 then if math<363547+15305535 then if math<-181749+15751679 then const=nil getlocal=nil math=7860528-320751 else bytecode=require(227942-225038)tmpname=require(-635767-(-638694))math=loadfile[bytecode]bytecode=math(tmpname)bytecode={}math=loadfile[require(-396810-(-399717))]end else if math<-940891+16646380 then const=-980034+5155000843682 path=require(-834814+837847)math=size[flush[-723656-(-723657)]]tmpname=size[flush[409442-409440]]hasnext=size[flush[108124-108121]]collectgarbage=hasnext(path,const)bytecode=tmpname[collectgarbage]hasnext=require(307773+-305062)tmpname=loadfile[hasnext]math[bytecode]=tmpname bytecode={}math=loadfile[require(615785+-612846)]else math=assert(15944892-443,{path})import={math()}bytecode={coroutine(import)}math=loadfile[require(990711+-987708)]end end else if math<884434+15081660 then if math<-17395+15858885 then collectgarbage,getlocal=path(hasnext,collectgarbage)math=collectgarbage and 59697+8692027 or-549482+8381133 else math=-223862+12204651 end else bytecode=size[flush[935831+-935821]]collectgarbage=require(841957-838832)collectgarbage=bytecode[collectgarbage]collectgarbage=collectgarbage(bytecode)bytecode=size[flush[-103597+103608]]getlocal=require(80719+-77727)path=size[flush[345534-345524]]const=loadfile[getlocal]collectgarbage=require(-554424+557386)math=-823487+5007682 collectgarbage=bytecode[collectgarbage]collectgarbage=collectgarbage(bytecode,path,const)end end end else if math<-537530+16962731 then if math<15371469-(-882049)then if math<894361+15249637 then if math<655094+15410413 then factory=require(-261881+264612)rawequal=require(777849-774847)package=loadfile[factory]rawequal=package[rawequal]factory={rawequal(package)}bytecode={coroutine(factory)}math=loadfile[require(-355834-(-358564))]else math=true math=math and 224723+11296613 or 315227+10214193 end else if math<16098614-(-63219)then math=1175441-201231 bytecode=path else upvaluejoin=not parse create=create+char bytecode=create<=import bytecode=upvaluejoin and bytecode upvaluejoin=create>=import upvaluejoin=parse and upvaluejoin bytecode=upvaluejoin or bytecode upvaluejoin=3333045-1032340 math=bytecode and upvaluejoin bytecode=808090-(-970836)math=math or bytecode end end else if math<17055671-748676 then if math<180279+16115743 then math=-310527+14244237 count=nil module=nil else getlocal=974181-973181 const=size[flush[-396197-(-396201)]]path=const>getlocal math=path and 9031926-317687 or-16389+14684042 end else if math<15313304-(-998431)then math=require(454016+-451123)tmpname=code[-1029144-(-1029145)]call=require(-717141-(-720199))math=tmpname[math]math=math(tmpname)getlocal=size[flush[-116890+116891]]exports=size[flush[314540-314538]]hasnext=math module=-734860+7705488852112 loadlib=exports(call,module)oldpath=require(-262054-(-265293))const=getlocal[loadlib]loadlib=require(-638921-(-641847))randomseed=20112582417217-603820 exports=loadfile[loadlib]call=size[flush[-875474-(-875475)]]module=size[flush[-46207+46209]]count=module(oldpath,randomseed)loadlib=call[count]getlocal=exports[loadlib]loadlib=size[flush[103953+-103950]]exports=getlocal(loadlib)path=const..exports collectgarbage=hasnext==path math=collectgarbage and 228771-(-254851)or 253243+3117742 bytecode=collectgarbage else getinfo=#randomseed parse=709917+-709917 raise=getinfo==parse math=raise and-1047353+14438500 or 10075868-(-816403)end end end else if math<15755712-(-821470)then if math<605420+15891075 then if math<-637749+17094382 then tmpname=sethook()size[tmpname]=code[139152+-139151]math=size[flush[680193-680192]]math=math and 709354+10015325 or 4707482-662911 else bytecode={}math=loadfile[require(446784-443948)]tmpname=tmpfile(tmpname)end else if math<16802285-260102 then tmpname=require(689431-686527)math=loadfile[tmpname]hasnext=size[flush[-639987+639995]]collectgarbage=-817486+817486 tmpname=math(hasnext,collectgarbage)math=9520939-1037660 else math=size[tmpname]hasnext=tmpfile(hasnext)tmpname=tmpfile(tmpname)bytecode=math()bytecode={}math=loadfile[require(946731+-944008)]end end else if math<735306+15992373 then if math<16721829-88091 then math=size[flush[-922926-(-922927)]]hasnext=size[flush[111978-111976]]exports=require(-296416-(-299111))path=size[flush[715071-715068]]loadlib=-85311+10273689280495 const=size[flush[-149669-(-149673)]]getlocal=const(exports,loadlib)loadlib=require(-1009134+1011992)call=32076683097616-(-574536)module=539244+27379230062433 collectgarbage=path[getlocal]tmpname=hasnext[collectgarbage]collectgarbage=size[flush[-399878-(-399883)]]const=size[flush[-737014-(-737017)]]getlocal=size[flush[704326-704322]]exports=getlocal(loadlib,call)path=const[exports]hasnext=collectgarbage[path]path=size[flush[-724642+724644]]getlocal=size[flush[192670-192667]]exports=size[flush[645018-645014]]call=require(-671466+674178)loadlib=exports(call,module)exports=require(-267437-(-270388))const=getlocal[loadlib]call=23277884129864-727025 module=18448010648588-277118 collectgarbage=path[const]loadlib=12716854564500-(-65677)bytecode=math(tmpname,hasnext,collectgarbage)math=size[flush[183372+-183371]]hasnext=size[flush[-643297-(-643299)]]path=size[flush[555355-555352]]const=size[flush[741098+-741094]]getlocal=const(exports,loadlib)collectgarbage=path[getlocal]tmpname=hasnext[collectgarbage]loadlib=require(-929650-(-932830))collectgarbage=size[flush[975859+-975854]]const=size[flush[-873192+873195]]getlocal=size[flush[-144209-(-144213)]]exports=getlocal(loadlib,call)path=const[exports]hasnext=collectgarbage[path]path=size[flush[530703-530698]]getlocal=size[flush[536564-536561]]call=require(-981318-(-984268))exports=size[flush[-544025-(-544029)]]loadlib=exports(call,module)module=23909752349376-898883 const=getlocal[loadlib]collectgarbage=path[const]bytecode=math(tmpname,hasnext,collectgarbage)math=size[flush[-730107-(-730108)]]call=26700255418812-(-71381)loadlib=6508300162027-(-276459)hasnext=size[flush[236318+-236316]]path=size[flush[83865+-83862]]const=size[flush[155538-155534]]exports=require(1029491+-1026717)getlocal=const(exports,loadlib)collectgarbage=path[getlocal]tmpname=hasnext[collectgarbage]collectgarbage=size[flush[311603+-311598]]const=size[flush[-529952-(-529955)]]loadlib=require(917005-913981)getlocal=size[flush[623361+-623357]]exports=getlocal(loadlib,call)path=const[exports]hasnext=collectgarbage[path]path=size[flush[-827264-(-827269)]]getlocal=size[flush[-867298-(-867301)]]call=require(224754+-221991)exports=size[flush[547161+-547157]]loadlib=exports(call,module)const=getlocal[loadlib]collectgarbage=path[const]bytecode=math(tmpname,hasnext,collectgarbage)module=-1013131+34206454182851 loadlib=14980318043284-82261 math=size[flush[227832-227831]]exports=require(-78207-(-81015))hasnext=size[flush[-598505-(-598507)]]path=size[flush[-946729+946732]]const=size[flush[182652+-182648]]getlocal=const(exports,loadlib)call=32461867423533-531489 collectgarbage=path[getlocal]loadlib=require(-871145+874285)tmpname=hasnext[collectgarbage]collectgarbage=size[flush[827307-827302]]const=size[flush[335660-335657]]getlocal=size[flush[-670327-(-670331)]]exports=getlocal(loadlib,call)path=const[exports]hasnext=collectgarbage[path]path=size[flush[58555+-58550]]getlocal=size[flush[-1010718-(-1010721)]]call=require(-935341-(-938371))exports=size[flush[-488842-(-488846)]]loadlib=exports(call,module)const=getlocal[loadlib]collectgarbage=path[const]loadlib=838407+28134617458726 bytecode=math(tmpname,hasnext,collectgarbage)math=size[flush[-914354-(-914355)]]call=22286391893011-(-674934)module=-315095+7869693861159 hasnext=size[flush[-1025997-(-1025999)]]path=size[flush[-491539-(-491542)]]exports=require(-886505-(-889525))const=size[flush[-431759-(-431763)]]getlocal=const(exports,loadlib)collectgarbage=path[getlocal]tmpname=hasnext[collectgarbage]collectgarbage=size[flush[867457+-867452]]const=size[flush[988342+-988339]]getlocal=size[flush[-896640-(-896644)]]loadlib=require(-984257+987431)exports=getlocal(loadlib,call)path=const[exports]hasnext=collectgarbage[path]path=size[flush[-113140-(-113145)]]call=require(13858+-10615)getlocal=size[flush[-19303-(-19306)]]exports=size[flush[680275+-680271]]loadlib=exports(call,module)const=getlocal[loadlib]collectgarbage=path[const]bytecode=math(tmpname,hasnext,collectgarbage)math=size[flush[-287798-(-287799)]]hasnext=size[flush[-1028332-(-1028334)]]loadlib=998368+31712181681615 path=size[flush[-818024-(-818027)]]const=size[flush[543281+-543277]]exports=require(344712+-341739)getlocal=const(exports,loadlib)collectgarbage=path[getlocal]tmpname=hasnext[collectgarbage]collectgarbage=size[flush[-684237-(-684242)]]loadlib=require(-358438-(-361129))call=54617+19811195539120 const=size[flush[-813095-(-813098)]]getlocal=size[flush[883941+-883937]]exports=getlocal(loadlib,call)path=const[exports]module=2112763517891-(-927764)hasnext=collectgarbage[path]path=size[flush[-948914-(-948919)]]call=require(-815603-(-818443))getlocal=size[flush[-542300-(-542303)]]exports=size[flush[-70039-(-70043)]]loadlib=exports(call,module)const=getlocal[loadlib]collectgarbage=path[const]bytecode=math(tmpname,hasnext,collectgarbage)math=size[flush[-306964-(-306965)]]hasnext=size[flush[579412-579410]]path=size[flush[515244-515241]]module=44194+15690390826984 exports=require(880641-877667)const=size[flush[-1047682-(-1047686)]]loadlib=27144551210694-175462 getlocal=const(exports,loadlib)collectgarbage=path[getlocal]tmpname=hasnext[collectgarbage]collectgarbage=size[flush[571733-571728]]call=-990106+31955062052282 const=size[flush[577009-577006]]loadlib=require(-879963+883065)getlocal=size[flush[-448061-(-448065)]]exports=getlocal(loadlib,call)path=const[exports]hasnext=collectgarbage[path]call=require(-610930-(-613902))path=size[flush[-332484-(-332489)]]getlocal=size[flush[860844+-860841]]exports=size[flush[-709733-(-709737)]]loadlib=exports(call,module)const=getlocal[loadlib]collectgarbage=path[const]bytecode=math(tmpname,hasnext,collectgarbage)bytecode={}math=loadfile[require(-847499+850562)]else math=true size[flush[-304613+304614]]=math bytecode=size[flush[368331+-368329]]math=bytecode and-282890-(-618653)or 5159737-877806 end else math=loadfile[require(414024-411148)]bytecode={}hasnext=nil tmpname=nil end end end end end end end end math=#rawnew return coroutine(bytecode)end,function()hasnext=hasnext+(966588+-966587)tmpname[hasnext]=323960-323959 return hasnext end,function(loadfile,require)local coroutine=collectgarbage(require)local code=function()return math(loadfile,{},require,coroutine)end return code end,function(loadfile)for require=460267+-460266,#loadfile,403684+-403683 do tmpname[loadfile[require]]=(623981-623980)+tmpname[loadfile[require]]end if code then local math=code(true)local coroutine=rawnew(math)coroutine[require(-323254-(-326270))],coroutine[require(-622992+626131)],coroutine[require(1048404-1045650)]=loadfile,path,function()return-232166+-2960853 end return math else return flush({},{[require(-611099-(-614238))]=path,[require(-212427-(-215443))]=loadfile;[require(-649510+652264)]=function()return-3830307-(-637288)end})end end,function(loadfile)tmpname[loadfile]=tmpname[loadfile]-(718083+-718082)if-46636+46636==tmpname[loadfile]then tmpname[loadfile],size[loadfile]=nil,nil end end,function(loadfile,require)local coroutine=collectgarbage(require)local code=function(...)return math(loadfile,{...},require,coroutine)end return code end return(rand(-272274+11039149,{}))(coroutine(bytecode))end)(getfenv and getfenv()or _ENV,unpack or table[require(-995297-(-998325))],newproxy,setmetatable,getmetatable,select,{...})end)(...)
